// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Data.Batch.Models
{
    internal static partial class ComputeNodeStateExtensions
    {
        public static string ToSerialString(this ComputeNodeState value) => value switch
        {
            ComputeNodeState.Idle => "idle",
            ComputeNodeState.Rebooting => "rebooting",
            ComputeNodeState.Reimaging => "reimaging",
            ComputeNodeState.Running => "running",
            ComputeNodeState.Unusable => "unusable",
            ComputeNodeState.Creating => "creating",
            ComputeNodeState.Starting => "starting",
            ComputeNodeState.WaitingForStartTask => "waitingforstarttask",
            ComputeNodeState.StartTaskFailed => "starttaskfailed",
            ComputeNodeState.Unknown => "unknown",
            ComputeNodeState.LeavingPool => "leavingpool",
            ComputeNodeState.Offline => "offline",
            ComputeNodeState.Preempted => "preempted",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComputeNodeState value.")
        };

        public static ComputeNodeState ToComputeNodeState(this string value)
        {
            if (string.Equals(value, "idle", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Idle;
            if (string.Equals(value, "rebooting", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Rebooting;
            if (string.Equals(value, "reimaging", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Reimaging;
            if (string.Equals(value, "running", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Running;
            if (string.Equals(value, "unusable", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Unusable;
            if (string.Equals(value, "creating", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Creating;
            if (string.Equals(value, "starting", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Starting;
            if (string.Equals(value, "waitingforstarttask", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.WaitingForStartTask;
            if (string.Equals(value, "starttaskfailed", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.StartTaskFailed;
            if (string.Equals(value, "unknown", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Unknown;
            if (string.Equals(value, "leavingpool", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.LeavingPool;
            if (string.Equals(value, "offline", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Offline;
            if (string.Equals(value, "preempted", StringComparison.InvariantCultureIgnoreCase)) return ComputeNodeState.Preempted;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComputeNodeState value.");
        }
    }
}
