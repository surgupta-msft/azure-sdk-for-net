// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Data.Batch.Models
{
    public partial class ResourceFile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AutoStorageContainerName))
            {
                writer.WritePropertyName("autoStorageContainerName");
                writer.WriteStringValue(AutoStorageContainerName);
            }
            if (Optional.IsDefined(StorageContainerUrl))
            {
                writer.WritePropertyName("storageContainerUrl");
                writer.WriteStringValue(StorageContainerUrl);
            }
            if (Optional.IsDefined(HttpUrl))
            {
                writer.WritePropertyName("httpUrl");
                writer.WriteStringValue(HttpUrl);
            }
            if (Optional.IsDefined(BlobPrefix))
            {
                writer.WritePropertyName("blobPrefix");
                writer.WriteStringValue(BlobPrefix);
            }
            if (Optional.IsDefined(FilePath))
            {
                writer.WritePropertyName("filePath");
                writer.WriteStringValue(FilePath);
            }
            if (Optional.IsDefined(FileMode))
            {
                writer.WritePropertyName("fileMode");
                writer.WriteStringValue(FileMode);
            }
            if (Optional.IsDefined(IdentityReference))
            {
                writer.WritePropertyName("identityReference");
                writer.WriteObjectValue(IdentityReference);
            }
            writer.WriteEndObject();
        }

        internal static ResourceFile DeserializeResourceFile(JsonElement element)
        {
            Optional<string> autoStorageContainerName = default;
            Optional<string> storageContainerUrl = default;
            Optional<string> httpUrl = default;
            Optional<string> blobPrefix = default;
            Optional<string> filePath = default;
            Optional<string> fileMode = default;
            Optional<ComputeNodeIdentityReference> identityReference = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("autoStorageContainerName"))
                {
                    autoStorageContainerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageContainerUrl"))
                {
                    storageContainerUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("httpUrl"))
                {
                    httpUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("blobPrefix"))
                {
                    blobPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filePath"))
                {
                    filePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileMode"))
                {
                    fileMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identityReference"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identityReference = ComputeNodeIdentityReference.DeserializeComputeNodeIdentityReference(property.Value);
                    continue;
                }
            }
            return new ResourceFile(autoStorageContainerName.Value, storageContainerUrl.Value, httpUrl.Value, blobPrefix.Value, filePath.Value, fileMode.Value, identityReference.Value);
        }
    }
}
