// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Data.Batch.Models
{
    public partial class ResourceStatistics
    {
        internal static ResourceStatistics DeserializeResourceStatistics(JsonElement element)
        {
            DateTimeOffset startTime = default;
            DateTimeOffset lastUpdateTime = default;
            double avgCPUPercentage = default;
            double avgMemoryGiB = default;
            double peakMemoryGiB = default;
            double avgDiskGiB = default;
            double peakDiskGiB = default;
            long diskReadIOps = default;
            long diskWriteIOps = default;
            double diskReadGiB = default;
            double diskWriteGiB = default;
            double networkReadGiB = default;
            double networkWriteGiB = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUpdateTime"))
                {
                    lastUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("avgCPUPercentage"))
                {
                    avgCPUPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("avgMemoryGiB"))
                {
                    avgMemoryGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("peakMemoryGiB"))
                {
                    peakMemoryGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("avgDiskGiB"))
                {
                    avgDiskGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("peakDiskGiB"))
                {
                    peakDiskGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("diskReadIOps"))
                {
                    diskReadIOps = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskWriteIOps"))
                {
                    diskWriteIOps = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskReadGiB"))
                {
                    diskReadGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("diskWriteGiB"))
                {
                    diskWriteGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("networkReadGiB"))
                {
                    networkReadGiB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("networkWriteGiB"))
                {
                    networkWriteGiB = property.Value.GetDouble();
                    continue;
                }
            }
            return new ResourceStatistics(startTime, lastUpdateTime, avgCPUPercentage, avgMemoryGiB, peakMemoryGiB, avgDiskGiB, peakDiskGiB, diskReadIOps, diskWriteIOps, diskReadGiB, diskWriteGiB, networkReadGiB, networkWriteGiB);
        }
    }
}
