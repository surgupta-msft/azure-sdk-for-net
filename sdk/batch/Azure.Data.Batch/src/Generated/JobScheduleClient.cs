// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Data.Batch
{
    /// <summary> The JobSchedule service client. </summary>
    public partial class JobScheduleClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://batch.core.windows.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of JobScheduleClient for mocking. </summary>
        protected JobScheduleClient()
        {
        }

        /// <summary> Initializes a new instance of JobScheduleClient. </summary>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="batchUrl"/> or <paramref name="credential"/> is null. </exception>
        public JobScheduleClient(string batchUrl, TokenCredential credential, AzureBatchClientOptions options = null)
        {
            Argument.AssertNotNull(batchUrl, nameof(batchUrl));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureBatchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _batchUrl = batchUrl;
            _apiVersion = options.Version;
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ExistsAsync(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Exists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Exists(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Exists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAsync(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Delete(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string,
        ///       displayName: string,
        ///       commandLine: string,
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string,
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string,
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string,
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string,
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           },
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition
        ///           }
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string,
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string,
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string,
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption,
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string,
        ///           cloudServiceConfiguration: {
        ///             osFamily: string,
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             },
        ///             nodeAgentSKUId: string,
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number,
        ///                 caching: CachingType,
        ///                 diskSizeGB: number,
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType,
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string,
        ///                 publisher: string,
        ///                 type: string,
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string,
        ///                   protocol: InboundEndpointProtocol,
        ///                   backendPort: number,
        ///                   frontendPortRangeStart: number,
        ///                   frontendPortRangeEnd: number,
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number,
        ///                       access: NetworkSecurityGroupRuleAccess,
        ///                       sourceAddressPrefix: string,
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ]
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string,
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string,
        ///               thumbprintAlgorithm: string,
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string,
        ///               password: string,
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string,
        ///                 containerName: string,
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string,
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string,
        ///                 source: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string,
        ///                 password: string
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string,
        ///                 azureFileUrl: string,
        ///                 accountKey: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     },
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string,
        ///     startTime: string (ISO 8601 Format),
        ///     lastUpdateTime: string (ISO 8601 Format),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime,
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime,
        ///     wallClockTime: JobScheduleStatisticsWallClockTime,
        ///     readIOps: number,
        ///     writeIOps: number,
        ///     readIOGiB: number,
        ///     writeIOGiB: number,
        ///     numSucceededTasks: number,
        ///     numFailedTasks: number,
        ///     numTaskRetries: number,
        ///     waitTime: JobScheduleStatisticsWaitTime
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetJobScheduleAsync(string jobScheduleId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.GetJobSchedule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobScheduleRequest(jobScheduleId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string,
        ///       displayName: string,
        ///       commandLine: string,
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string,
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string,
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string,
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string,
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           },
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition
        ///           }
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string,
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string,
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string,
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption,
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string,
        ///           cloudServiceConfiguration: {
        ///             osFamily: string,
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             },
        ///             nodeAgentSKUId: string,
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number,
        ///                 caching: CachingType,
        ///                 diskSizeGB: number,
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType,
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string,
        ///                 publisher: string,
        ///                 type: string,
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string,
        ///                   protocol: InboundEndpointProtocol,
        ///                   backendPort: number,
        ///                   frontendPortRangeStart: number,
        ///                   frontendPortRangeEnd: number,
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number,
        ///                       access: NetworkSecurityGroupRuleAccess,
        ///                       sourceAddressPrefix: string,
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ]
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string,
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string,
        ///               thumbprintAlgorithm: string,
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string,
        ///               password: string,
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string,
        ///                 containerName: string,
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string,
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string,
        ///                 source: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string,
        ///                 password: string
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string,
        ///                 azureFileUrl: string,
        ///                 accountKey: string,
        ///                 relativeMountPath: string,
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     },
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string,
        ///     startTime: string (ISO 8601 Format),
        ///     lastUpdateTime: string (ISO 8601 Format),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime,
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime,
        ///     wallClockTime: JobScheduleStatisticsWallClockTime,
        ///     readIOps: number,
        ///     writeIOps: number,
        ///     readIOGiB: number,
        ///     writeIOGiB: number,
        ///     numSucceededTasks: number,
        ///     numFailedTasks: number,
        ///     numTaskRetries: number,
        ///     waitTime: JobScheduleStatisticsWaitTime
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetJobSchedule(string jobScheduleId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.GetJobSchedule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobScheduleRequest(jobScheduleId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   metadata: [MetadataItem]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchAsync(string jobScheduleId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(jobScheduleId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   metadata: [MetadataItem]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Patch(string jobScheduleId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(jobScheduleId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobScheduleStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobScheduleStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateAsync(string jobScheduleId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(jobScheduleId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobScheduleStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobScheduleStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Update(string jobScheduleId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(jobScheduleId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> No new Jobs will be created until the Job Schedule is enabled again. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DisableAsync(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Disable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> No new Jobs will be created until the Job Schedule is enabled again. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Disable(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Disable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> EnableAsync(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Enable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Enable(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Enable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> TerminateAsync(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Terminate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Terminate(string jobScheduleId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Terminate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateRequest(jobScheduleId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a Job Schedule to the specified Account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobScheduleStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobScheduleStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddAsync(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a Job Schedule to the specified Account. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobScheduleState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobScheduleState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   schedule: {
        ///     doNotRunUntil: string (ISO 8601 Format),
        ///     doNotRunAfter: string (ISO 8601 Format),
        ///     startWindow: ScheduleStartWindow,
        ///     recurrenceInterval: ScheduleRecurrenceInterval
        ///   },
        ///   jobSpecification: {
        ///     priority: number,
        ///     allowTaskPreemption: boolean,
        ///     maxParallelTasks: number,
        ///     displayName: string,
        ///     usesTaskDependencies: boolean,
        ///     onAllTasksComplete: OnAllTasksComplete,
        ///     onTaskFailure: OnTaskFailure,
        ///     networkConfiguration: {
        ///       subnetId: string (required)
        ///     },
        ///     constraints: {
        ///       maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     jobManagerTask: {
        ///       id: string (required),
        ///       displayName: string,
        ///       commandLine: string (required),
        ///       containerSettings: {
        ///         containerRunOptions: string,
        ///         imageName: string (required),
        ///         registry: {
        ///           username: string,
        ///           password: string,
        ///           registryServer: string,
        ///           identityReference: {
        ///             resourceId: string
        ///           }
        ///         },
        ///         workingDirectory: ContainerWorkingDirectory
        ///       },
        ///       resourceFiles: [
        ///         {
        ///           autoStorageContainerName: string,
        ///           storageContainerUrl: string,
        ///           httpUrl: string,
        ///           blobPrefix: string,
        ///           filePath: string,
        ///           fileMode: string,
        ///           identityReference: ComputeNodeIdentityReference
        ///         }
        ///       ],
        ///       outputFiles: [
        ///         {
        ///           filePattern: string (required),
        ///           destination: {
        ///             container: {
        ///               path: string,
        ///               containerUrl: string (required),
        ///               identityReference: ComputeNodeIdentityReference,
        ///               uploadHeaders: [
        ///                 {
        ///                   name: string (required),
        ///                   value: string
        ///                 }
        ///               ]
        ///             }
        ///           } (required),
        ///           uploadOptions: {
        ///             uploadCondition: OutputFileUploadCondition (required)
        ///           } (required)
        ///         }
        ///       ],
        ///       environmentSettings: [
        ///         {
        ///           name: string (required),
        ///           value: string
        ///         }
        ///       ],
        ///       constraints: {
        ///         maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///         retentionTime: TaskConstraintsRetentionTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       requiredSlots: number,
        ///       killJobOnCompletion: boolean,
        ///       userIdentity: {
        ///         username: string,
        ///         autoUser: {
        ///           scope: AutoUserScope,
        ///           elevationLevel: ElevationLevel
        ///         }
        ///       },
        ///       runExclusive: boolean,
        ///       applicationPackageReferences: [
        ///         {
        ///           applicationId: string (required),
        ///           version: string
        ///         }
        ///       ],
        ///       authenticationTokenSettings: {
        ///         access: [AccessScope]
        ///       },
        ///       allowLowPriorityNode: boolean
        ///     },
        ///     jobPreparationTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       constraints: TaskConstraints,
        ///       waitForSuccess: boolean,
        ///       userIdentity: UserIdentity,
        ///       rerunOnNodeRebootAfterSuccess: boolean
        ///     },
        ///     jobReleaseTask: {
        ///       id: string,
        ///       commandLine: string (required),
        ///       containerSettings: TaskContainerSettings,
        ///       resourceFiles: [ResourceFile],
        ///       environmentSettings: [EnvironmentSetting],
        ///       maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///       retentionTime: JobReleaseTaskRetentionTime,
        ///       userIdentity: UserIdentity
        ///     },
        ///     commonEnvironmentSettings: [EnvironmentSetting],
        ///     poolInfo: {
        ///       poolId: string,
        ///       autoPoolSpecification: {
        ///         autoPoolIdPrefix: string,
        ///         poolLifetimeOption: PoolLifetimeOption (required),
        ///         keepAlive: boolean,
        ///         pool: {
        ///           displayName: string,
        ///           vmSize: string (required),
        ///           cloudServiceConfiguration: {
        ///             osFamily: string (required),
        ///             osVersion: string
        ///           },
        ///           virtualMachineConfiguration: {
        ///             imageReference: {
        ///               publisher: string,
        ///               offer: string,
        ///               sku: string,
        ///               version: string,
        ///               virtualMachineImageId: string,
        ///               exactVersion: string
        ///             } (required),
        ///             nodeAgentSKUId: string (required),
        ///             windowsConfiguration: {
        ///               enableAutomaticUpdates: boolean
        ///             },
        ///             dataDisks: [
        ///               {
        ///                 lun: number (required),
        ///                 caching: CachingType,
        ///                 diskSizeGB: number (required),
        ///                 storageAccountType: StorageAccountType
        ///               }
        ///             ],
        ///             licenseType: string,
        ///             containerConfiguration: {
        ///               type: ContainerType (required),
        ///               containerImageNames: [string],
        ///               containerRegistries: [ContainerRegistry]
        ///             },
        ///             diskEncryptionConfiguration: {
        ///               targets: [DiskEncryptionTarget]
        ///             },
        ///             nodePlacementConfiguration: {
        ///               policy: NodePlacementPolicyType
        ///             },
        ///             extensions: [
        ///               {
        ///                 name: string (required),
        ///                 publisher: string (required),
        ///                 type: string (required),
        ///                 typeHandlerVersion: string,
        ///                 autoUpgradeMinorVersion: boolean,
        ///                 settings: AnyObject,
        ///                 protectedSettings: AnyObject,
        ///                 provisionAfterExtensions: [string]
        ///               }
        ///             ],
        ///             osDisk: {
        ///               ephemeralOSDiskSettings: {
        ///                 placement: DiffDiskPlacement
        ///               }
        ///             }
        ///           },
        ///           taskSlotsPerNode: number,
        ///           taskSchedulingPolicy: {
        ///             nodeFillType: ComputeNodeFillType (required)
        ///           },
        ///           resizeTimeout: PoolSpecificationResizeTimeout,
        ///           targetDedicatedNodes: number,
        ///           targetLowPriorityNodes: number,
        ///           enableAutoScale: boolean,
        ///           autoScaleFormula: string,
        ///           autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///           enableInterNodeCommunication: boolean,
        ///           networkConfiguration: {
        ///             subnetId: string,
        ///             dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///             endpointConfiguration: {
        ///               inboundNATPools: [
        ///                 {
        ///                   name: string (required),
        ///                   protocol: InboundEndpointProtocol (required),
        ///                   backendPort: number (required),
        ///                   frontendPortRangeStart: number (required),
        ///                   frontendPortRangeEnd: number (required),
        ///                   networkSecurityGroupRules: [
        ///                     {
        ///                       priority: number (required),
        ///                       access: NetworkSecurityGroupRuleAccess (required),
        ///                       sourceAddressPrefix: string (required),
        ///                       sourcePortRanges: [string]
        ///                     }
        ///                   ]
        ///                 }
        ///               ] (required)
        ///             },
        ///             publicIPAddressConfiguration: {
        ///               provision: IPAddressProvisioningType,
        ///               ipAddressIds: [string]
        ///             }
        ///           },
        ///           startTask: {
        ///             commandLine: string (required),
        ///             containerSettings: TaskContainerSettings,
        ///             resourceFiles: [ResourceFile],
        ///             environmentSettings: [EnvironmentSetting],
        ///             userIdentity: UserIdentity,
        ///             maxTaskRetryCount: number,
        ///             waitForSuccess: boolean
        ///           },
        ///           certificateReferences: [
        ///             {
        ///               thumbprint: string (required),
        ///               thumbprintAlgorithm: string (required),
        ///               storeLocation: CertificateStoreLocation,
        ///               storeName: string,
        ///               visibility: [CertificateVisibility]
        ///             }
        ///           ],
        ///           applicationPackageReferences: [ApplicationPackageReference],
        ///           applicationLicenses: [string],
        ///           userAccounts: [
        ///             {
        ///               name: string (required),
        ///               password: string (required),
        ///               elevationLevel: ElevationLevel,
        ///               linuxUserConfiguration: {
        ///                 uid: number,
        ///                 gid: number,
        ///                 sshPrivateKey: string
        ///               },
        ///               windowsUserConfiguration: {
        ///                 loginMode: LoginMode
        ///               }
        ///             }
        ///           ],
        ///           metadata: [
        ///             {
        ///               name: string (required),
        ///               value: string (required)
        ///             }
        ///           ],
        ///           mountConfiguration: [
        ///             {
        ///               azureBlobFileSystemConfiguration: {
        ///                 accountName: string (required),
        ///                 containerName: string (required),
        ///                 accountKey: string,
        ///                 sasKey: string,
        ///                 blobfuseOptions: string,
        ///                 relativeMountPath: string (required),
        ///                 identityReference: ComputeNodeIdentityReference
        ///               },
        ///               nfsMountConfiguration: {
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               },
        ///               cifsMountConfiguration: {
        ///                 username: string (required),
        ///                 source: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string,
        ///                 password: string (required)
        ///               },
        ///               azureFileShareConfiguration: {
        ///                 accountName: string (required),
        ///                 azureFileUrl: string (required),
        ///                 accountKey: string (required),
        ///                 relativeMountPath: string (required),
        ///                 mountOptions: string
        ///               }
        ///             }
        ///           ]
        ///         }
        ///       }
        ///     } (required),
        ///     metadata: [MetadataItem]
        ///   },
        ///   executionInfo: {
        ///     nextRunTime: string (ISO 8601 Format),
        ///     recentJob: {
        ///       id: string,
        ///       url: string
        ///     },
        ///     endTime: string (ISO 8601 Format)
        ///   },
        ///   metadata: [MetadataItem],
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobScheduleStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobScheduleStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobScheduleStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobScheduleStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Add(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobScheduleClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Job Schedules can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobScheduleState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobScheduleState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         doNotRunUntil: string (ISO 8601 Format),
        ///         doNotRunAfter: string (ISO 8601 Format),
        ///         startWindow: ScheduleStartWindow,
        ///         recurrenceInterval: ScheduleRecurrenceInterval
        ///       },
        ///       jobSpecification: {
        ///         priority: number,
        ///         allowTaskPreemption: boolean,
        ///         maxParallelTasks: number,
        ///         displayName: string,
        ///         usesTaskDependencies: boolean,
        ///         onAllTasksComplete: OnAllTasksComplete,
        ///         onTaskFailure: OnTaskFailure,
        ///         networkConfiguration: {
        ///           subnetId: string
        ///         },
        ///         constraints: {
        ///           maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         jobManagerTask: {
        ///           id: string,
        ///           displayName: string,
        ///           commandLine: string,
        ///           containerSettings: {
        ///             containerRunOptions: string,
        ///             imageName: string,
        ///             registry: {
        ///               username: string,
        ///               password: string,
        ///               registryServer: string,
        ///               identityReference: {
        ///                 resourceId: string
        ///               }
        ///             },
        ///             workingDirectory: ContainerWorkingDirectory
        ///           },
        ///           resourceFiles: [
        ///             {
        ///               autoStorageContainerName: string,
        ///               storageContainerUrl: string,
        ///               httpUrl: string,
        ///               blobPrefix: string,
        ///               filePath: string,
        ///               fileMode: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             }
        ///           ],
        ///           outputFiles: [
        ///             {
        ///               filePattern: string,
        ///               destination: {
        ///                 container: {
        ///                   path: string,
        ///                   containerUrl: string,
        ///                   identityReference: ComputeNodeIdentityReference,
        ///                   uploadHeaders: [
        ///                     {
        ///                       name: string,
        ///                       value: string
        ///                     }
        ///                   ]
        ///                 }
        ///               },
        ///               uploadOptions: {
        ///                 uploadCondition: OutputFileUploadCondition
        ///               }
        ///             }
        ///           ],
        ///           environmentSettings: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ],
        ///           constraints: {
        ///             maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///             retentionTime: TaskConstraintsRetentionTime,
        ///             maxTaskRetryCount: number
        ///           },
        ///           requiredSlots: number,
        ///           killJobOnCompletion: boolean,
        ///           userIdentity: {
        ///             username: string,
        ///             autoUser: {
        ///               scope: AutoUserScope,
        ///               elevationLevel: ElevationLevel
        ///             }
        ///           },
        ///           runExclusive: boolean,
        ///           applicationPackageReferences: [
        ///             {
        ///               applicationId: string,
        ///               version: string
        ///             }
        ///           ],
        ///           authenticationTokenSettings: {
        ///             access: [AccessScope]
        ///           },
        ///           allowLowPriorityNode: boolean
        ///         },
        ///         jobPreparationTask: {
        ///           id: string,
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           constraints: TaskConstraints,
        ///           waitForSuccess: boolean,
        ///           userIdentity: UserIdentity,
        ///           rerunOnNodeRebootAfterSuccess: boolean
        ///         },
        ///         jobReleaseTask: {
        ///           id: string,
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///           retentionTime: JobReleaseTaskRetentionTime,
        ///           userIdentity: UserIdentity
        ///         },
        ///         commonEnvironmentSettings: [EnvironmentSetting],
        ///         poolInfo: {
        ///           poolId: string,
        ///           autoPoolSpecification: {
        ///             autoPoolIdPrefix: string,
        ///             poolLifetimeOption: PoolLifetimeOption,
        ///             keepAlive: boolean,
        ///             pool: {
        ///               displayName: string,
        ///               vmSize: string,
        ///               cloudServiceConfiguration: {
        ///                 osFamily: string,
        ///                 osVersion: string
        ///               },
        ///               virtualMachineConfiguration: {
        ///                 imageReference: {
        ///                   publisher: string,
        ///                   offer: string,
        ///                   sku: string,
        ///                   version: string,
        ///                   virtualMachineImageId: string,
        ///                   exactVersion: string
        ///                 },
        ///                 nodeAgentSKUId: string,
        ///                 windowsConfiguration: {
        ///                   enableAutomaticUpdates: boolean
        ///                 },
        ///                 dataDisks: [
        ///                   {
        ///                     lun: number,
        ///                     caching: CachingType,
        ///                     diskSizeGB: number,
        ///                     storageAccountType: StorageAccountType
        ///                   }
        ///                 ],
        ///                 licenseType: string,
        ///                 containerConfiguration: {
        ///                   type: ContainerType,
        ///                   containerImageNames: [string],
        ///                   containerRegistries: [ContainerRegistry]
        ///                 },
        ///                 diskEncryptionConfiguration: {
        ///                   targets: [DiskEncryptionTarget]
        ///                 },
        ///                 nodePlacementConfiguration: {
        ///                   policy: NodePlacementPolicyType
        ///                 },
        ///                 extensions: [
        ///                   {
        ///                     name: string,
        ///                     publisher: string,
        ///                     type: string,
        ///                     typeHandlerVersion: string,
        ///                     autoUpgradeMinorVersion: boolean,
        ///                     settings: AnyObject,
        ///                     protectedSettings: AnyObject,
        ///                     provisionAfterExtensions: [string]
        ///                   }
        ///                 ],
        ///                 osDisk: {
        ///                   ephemeralOSDiskSettings: {
        ///                     placement: DiffDiskPlacement
        ///                   }
        ///                 }
        ///               },
        ///               taskSlotsPerNode: number,
        ///               taskSchedulingPolicy: {
        ///                 nodeFillType: ComputeNodeFillType
        ///               },
        ///               resizeTimeout: PoolSpecificationResizeTimeout,
        ///               targetDedicatedNodes: number,
        ///               targetLowPriorityNodes: number,
        ///               enableAutoScale: boolean,
        ///               autoScaleFormula: string,
        ///               autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///               enableInterNodeCommunication: boolean,
        ///               networkConfiguration: {
        ///                 subnetId: string,
        ///                 dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///                 endpointConfiguration: {
        ///                   inboundNATPools: [
        ///                     {
        ///                       name: string,
        ///                       protocol: InboundEndpointProtocol,
        ///                       backendPort: number,
        ///                       frontendPortRangeStart: number,
        ///                       frontendPortRangeEnd: number,
        ///                       networkSecurityGroupRules: [
        ///                         {
        ///                           priority: number,
        ///                           access: NetworkSecurityGroupRuleAccess,
        ///                           sourceAddressPrefix: string,
        ///                           sourcePortRanges: [string]
        ///                         }
        ///                       ]
        ///                     }
        ///                   ]
        ///                 },
        ///                 publicIPAddressConfiguration: {
        ///                   provision: IPAddressProvisioningType,
        ///                   ipAddressIds: [string]
        ///                 }
        ///               },
        ///               startTask: {
        ///                 commandLine: string,
        ///                 containerSettings: TaskContainerSettings,
        ///                 resourceFiles: [ResourceFile],
        ///                 environmentSettings: [EnvironmentSetting],
        ///                 userIdentity: UserIdentity,
        ///                 maxTaskRetryCount: number,
        ///                 waitForSuccess: boolean
        ///               },
        ///               certificateReferences: [
        ///                 {
        ///                   thumbprint: string,
        ///                   thumbprintAlgorithm: string,
        ///                   storeLocation: CertificateStoreLocation,
        ///                   storeName: string,
        ///                   visibility: [CertificateVisibility]
        ///                 }
        ///               ],
        ///               applicationPackageReferences: [ApplicationPackageReference],
        ///               applicationLicenses: [string],
        ///               userAccounts: [
        ///                 {
        ///                   name: string,
        ///                   password: string,
        ///                   elevationLevel: ElevationLevel,
        ///                   linuxUserConfiguration: {
        ///                     uid: number,
        ///                     gid: number,
        ///                     sshPrivateKey: string
        ///                   },
        ///                   windowsUserConfiguration: {
        ///                     loginMode: LoginMode
        ///                   }
        ///                 }
        ///               ],
        ///               metadata: [
        ///                 {
        ///                   name: string,
        ///                   value: string
        ///                 }
        ///               ],
        ///               mountConfiguration: [
        ///                 {
        ///                   azureBlobFileSystemConfiguration: {
        ///                     accountName: string,
        ///                     containerName: string,
        ///                     accountKey: string,
        ///                     sasKey: string,
        ///                     blobfuseOptions: string,
        ///                     relativeMountPath: string,
        ///                     identityReference: ComputeNodeIdentityReference
        ///                   },
        ///                   nfsMountConfiguration: {
        ///                     source: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string
        ///                   },
        ///                   cifsMountConfiguration: {
        ///                     username: string,
        ///                     source: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string,
        ///                     password: string
        ///                   },
        ///                   azureFileShareConfiguration: {
        ///                     accountName: string,
        ///                     azureFileUrl: string,
        ///                     accountKey: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string
        ///                   }
        ///                 }
        ///               ]
        ///             }
        ///           }
        ///         },
        ///         metadata: [MetadataItem]
        ///       },
        ///       executionInfo: {
        ///         nextRunTime: string (ISO 8601 Format),
        ///         recentJob: {
        ///           id: string,
        ///           url: string
        ///         },
        ///         endTime: string (ISO 8601 Format)
        ///       },
        ///       metadata: [MetadataItem],
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobScheduleStatisticsUserCPUTime,
        ///         kernelCPUTime: JobScheduleStatisticsKernelCPUTime,
        ///         wallClockTime: JobScheduleStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobScheduleStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetJobSchedulesAsync(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "JobScheduleClient.GetJobSchedules");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetJobSchedulesRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetJobSchedulesNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Job Schedules can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobScheduleState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobScheduleState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       schedule: {
        ///         doNotRunUntil: string (ISO 8601 Format),
        ///         doNotRunAfter: string (ISO 8601 Format),
        ///         startWindow: ScheduleStartWindow,
        ///         recurrenceInterval: ScheduleRecurrenceInterval
        ///       },
        ///       jobSpecification: {
        ///         priority: number,
        ///         allowTaskPreemption: boolean,
        ///         maxParallelTasks: number,
        ///         displayName: string,
        ///         usesTaskDependencies: boolean,
        ///         onAllTasksComplete: OnAllTasksComplete,
        ///         onTaskFailure: OnTaskFailure,
        ///         networkConfiguration: {
        ///           subnetId: string
        ///         },
        ///         constraints: {
        ///           maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         jobManagerTask: {
        ///           id: string,
        ///           displayName: string,
        ///           commandLine: string,
        ///           containerSettings: {
        ///             containerRunOptions: string,
        ///             imageName: string,
        ///             registry: {
        ///               username: string,
        ///               password: string,
        ///               registryServer: string,
        ///               identityReference: {
        ///                 resourceId: string
        ///               }
        ///             },
        ///             workingDirectory: ContainerWorkingDirectory
        ///           },
        ///           resourceFiles: [
        ///             {
        ///               autoStorageContainerName: string,
        ///               storageContainerUrl: string,
        ///               httpUrl: string,
        ///               blobPrefix: string,
        ///               filePath: string,
        ///               fileMode: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             }
        ///           ],
        ///           outputFiles: [
        ///             {
        ///               filePattern: string,
        ///               destination: {
        ///                 container: {
        ///                   path: string,
        ///                   containerUrl: string,
        ///                   identityReference: ComputeNodeIdentityReference,
        ///                   uploadHeaders: [
        ///                     {
        ///                       name: string,
        ///                       value: string
        ///                     }
        ///                   ]
        ///                 }
        ///               },
        ///               uploadOptions: {
        ///                 uploadCondition: OutputFileUploadCondition
        ///               }
        ///             }
        ///           ],
        ///           environmentSettings: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ],
        ///           constraints: {
        ///             maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///             retentionTime: TaskConstraintsRetentionTime,
        ///             maxTaskRetryCount: number
        ///           },
        ///           requiredSlots: number,
        ///           killJobOnCompletion: boolean,
        ///           userIdentity: {
        ///             username: string,
        ///             autoUser: {
        ///               scope: AutoUserScope,
        ///               elevationLevel: ElevationLevel
        ///             }
        ///           },
        ///           runExclusive: boolean,
        ///           applicationPackageReferences: [
        ///             {
        ///               applicationId: string,
        ///               version: string
        ///             }
        ///           ],
        ///           authenticationTokenSettings: {
        ///             access: [AccessScope]
        ///           },
        ///           allowLowPriorityNode: boolean
        ///         },
        ///         jobPreparationTask: {
        ///           id: string,
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           constraints: TaskConstraints,
        ///           waitForSuccess: boolean,
        ///           userIdentity: UserIdentity,
        ///           rerunOnNodeRebootAfterSuccess: boolean
        ///         },
        ///         jobReleaseTask: {
        ///           id: string,
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///           retentionTime: JobReleaseTaskRetentionTime,
        ///           userIdentity: UserIdentity
        ///         },
        ///         commonEnvironmentSettings: [EnvironmentSetting],
        ///         poolInfo: {
        ///           poolId: string,
        ///           autoPoolSpecification: {
        ///             autoPoolIdPrefix: string,
        ///             poolLifetimeOption: PoolLifetimeOption,
        ///             keepAlive: boolean,
        ///             pool: {
        ///               displayName: string,
        ///               vmSize: string,
        ///               cloudServiceConfiguration: {
        ///                 osFamily: string,
        ///                 osVersion: string
        ///               },
        ///               virtualMachineConfiguration: {
        ///                 imageReference: {
        ///                   publisher: string,
        ///                   offer: string,
        ///                   sku: string,
        ///                   version: string,
        ///                   virtualMachineImageId: string,
        ///                   exactVersion: string
        ///                 },
        ///                 nodeAgentSKUId: string,
        ///                 windowsConfiguration: {
        ///                   enableAutomaticUpdates: boolean
        ///                 },
        ///                 dataDisks: [
        ///                   {
        ///                     lun: number,
        ///                     caching: CachingType,
        ///                     diskSizeGB: number,
        ///                     storageAccountType: StorageAccountType
        ///                   }
        ///                 ],
        ///                 licenseType: string,
        ///                 containerConfiguration: {
        ///                   type: ContainerType,
        ///                   containerImageNames: [string],
        ///                   containerRegistries: [ContainerRegistry]
        ///                 },
        ///                 diskEncryptionConfiguration: {
        ///                   targets: [DiskEncryptionTarget]
        ///                 },
        ///                 nodePlacementConfiguration: {
        ///                   policy: NodePlacementPolicyType
        ///                 },
        ///                 extensions: [
        ///                   {
        ///                     name: string,
        ///                     publisher: string,
        ///                     type: string,
        ///                     typeHandlerVersion: string,
        ///                     autoUpgradeMinorVersion: boolean,
        ///                     settings: AnyObject,
        ///                     protectedSettings: AnyObject,
        ///                     provisionAfterExtensions: [string]
        ///                   }
        ///                 ],
        ///                 osDisk: {
        ///                   ephemeralOSDiskSettings: {
        ///                     placement: DiffDiskPlacement
        ///                   }
        ///                 }
        ///               },
        ///               taskSlotsPerNode: number,
        ///               taskSchedulingPolicy: {
        ///                 nodeFillType: ComputeNodeFillType
        ///               },
        ///               resizeTimeout: PoolSpecificationResizeTimeout,
        ///               targetDedicatedNodes: number,
        ///               targetLowPriorityNodes: number,
        ///               enableAutoScale: boolean,
        ///               autoScaleFormula: string,
        ///               autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///               enableInterNodeCommunication: boolean,
        ///               networkConfiguration: {
        ///                 subnetId: string,
        ///                 dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///                 endpointConfiguration: {
        ///                   inboundNATPools: [
        ///                     {
        ///                       name: string,
        ///                       protocol: InboundEndpointProtocol,
        ///                       backendPort: number,
        ///                       frontendPortRangeStart: number,
        ///                       frontendPortRangeEnd: number,
        ///                       networkSecurityGroupRules: [
        ///                         {
        ///                           priority: number,
        ///                           access: NetworkSecurityGroupRuleAccess,
        ///                           sourceAddressPrefix: string,
        ///                           sourcePortRanges: [string]
        ///                         }
        ///                       ]
        ///                     }
        ///                   ]
        ///                 },
        ///                 publicIPAddressConfiguration: {
        ///                   provision: IPAddressProvisioningType,
        ///                   ipAddressIds: [string]
        ///                 }
        ///               },
        ///               startTask: {
        ///                 commandLine: string,
        ///                 containerSettings: TaskContainerSettings,
        ///                 resourceFiles: [ResourceFile],
        ///                 environmentSettings: [EnvironmentSetting],
        ///                 userIdentity: UserIdentity,
        ///                 maxTaskRetryCount: number,
        ///                 waitForSuccess: boolean
        ///               },
        ///               certificateReferences: [
        ///                 {
        ///                   thumbprint: string,
        ///                   thumbprintAlgorithm: string,
        ///                   storeLocation: CertificateStoreLocation,
        ///                   storeName: string,
        ///                   visibility: [CertificateVisibility]
        ///                 }
        ///               ],
        ///               applicationPackageReferences: [ApplicationPackageReference],
        ///               applicationLicenses: [string],
        ///               userAccounts: [
        ///                 {
        ///                   name: string,
        ///                   password: string,
        ///                   elevationLevel: ElevationLevel,
        ///                   linuxUserConfiguration: {
        ///                     uid: number,
        ///                     gid: number,
        ///                     sshPrivateKey: string
        ///                   },
        ///                   windowsUserConfiguration: {
        ///                     loginMode: LoginMode
        ///                   }
        ///                 }
        ///               ],
        ///               metadata: [
        ///                 {
        ///                   name: string,
        ///                   value: string
        ///                 }
        ///               ],
        ///               mountConfiguration: [
        ///                 {
        ///                   azureBlobFileSystemConfiguration: {
        ///                     accountName: string,
        ///                     containerName: string,
        ///                     accountKey: string,
        ///                     sasKey: string,
        ///                     blobfuseOptions: string,
        ///                     relativeMountPath: string,
        ///                     identityReference: ComputeNodeIdentityReference
        ///                   },
        ///                   nfsMountConfiguration: {
        ///                     source: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string
        ///                   },
        ///                   cifsMountConfiguration: {
        ///                     username: string,
        ///                     source: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string,
        ///                     password: string
        ///                   },
        ///                   azureFileShareConfiguration: {
        ///                     accountName: string,
        ///                     azureFileUrl: string,
        ///                     accountKey: string,
        ///                     relativeMountPath: string,
        ///                     mountOptions: string
        ///                   }
        ///                 }
        ///               ]
        ///             }
        ///           }
        ///         },
        ///         metadata: [MetadataItem]
        ///       },
        ///       executionInfo: {
        ///         nextRunTime: string (ISO 8601 Format),
        ///         recentJob: {
        ///           id: string,
        ///           url: string
        ///         },
        ///         endTime: string (ISO 8601 Format)
        ///       },
        ///       metadata: [MetadataItem],
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobScheduleStatisticsUserCPUTime,
        ///         kernelCPUTime: JobScheduleStatisticsKernelCPUTime,
        ///         wallClockTime: JobScheduleStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobScheduleStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetJobSchedules(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "JobScheduleClient.GetJobSchedules");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetJobSchedulesRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetJobSchedulesNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateExistsRequest(string jobScheduleId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string jobScheduleId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateGetJobScheduleRequest(string jobScheduleId, string select, string expand, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreatePatchRequest(string jobScheduleId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateRequest(string jobScheduleId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableRequest(string jobScheduleId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/disable", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateEnableRequest(string jobScheduleId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/enable", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateTerminateRequest(string jobScheduleId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/terminate", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateAddRequest(RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetJobSchedulesRequest(string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobSchedulesNextPageRequest(string nextLink, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200404;
        private static ResponseClassifier ResponseClassifier200404 => _responseClassifier200404 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 404 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
