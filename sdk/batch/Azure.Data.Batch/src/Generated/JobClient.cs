// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Data.Batch
{
    /// <summary> The Job service client. </summary>
    public partial class JobClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://batch.core.windows.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of JobClient for mocking. </summary>
        protected JobClient()
        {
        }

        /// <summary> Initializes a new instance of JobClient. </summary>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="batchUrl"/> or <paramref name="credential"/> is null. </exception>
        public JobClient(string batchUrl, TokenCredential credential, AzureBatchClientOptions options = null)
        {
            Argument.AssertNotNull(batchUrl, nameof(batchUrl));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureBatchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _batchUrl = batchUrl;
            _apiVersion = options.Version;
        }

        /// <summary> Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   url: string,
        ///   startTime: string (ISO 8601 Format),
        ///   lastUpdateTime: string (ISO 8601 Format),
        ///   userCPUTime: JobStatisticsUserCPUTime,
        ///   kernelCPUTime: JobStatisticsKernelCPUTime,
        ///   wallClockTime: JobStatisticsWallClockTime,
        ///   readIOps: number,
        ///   writeIOps: number,
        ///   readIOGiB: number,
        ///   writeIOGiB: number,
        ///   numSucceededTasks: number,
        ///   numFailedTasks: number,
        ///   numTaskRetries: number,
        ///   waitTime: JobStatisticsWaitTime
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllLifetimeStatisticsAsync(int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JobClient.GetAllLifetimeStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllLifetimeStatisticsRequest(timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Statistics are aggregated across all Jobs that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </summary>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   url: string,
        ///   startTime: string (ISO 8601 Format),
        ///   lastUpdateTime: string (ISO 8601 Format),
        ///   userCPUTime: JobStatisticsUserCPUTime,
        ///   kernelCPUTime: JobStatisticsKernelCPUTime,
        ///   wallClockTime: JobStatisticsWallClockTime,
        ///   readIOps: number,
        ///   writeIOps: number,
        ///   readIOGiB: number,
        ///   writeIOGiB: number,
        ///   numSucceededTasks: number,
        ///   numFailedTasks: number,
        ///   numTaskRetries: number,
        ///   waitTime: JobStatisticsWaitTime
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAllLifetimeStatistics(int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("JobClient.GetAllLifetimeStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllLifetimeStatisticsRequest(timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks&apos; working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted. </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAsync(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deleting a Job also deletes all Tasks that are part of that Job, and all Job statistics. This also overrides the retention period for Task data; that is, if the Job contains Tasks which are still retained on Compute Nodes, the Batch services deletes those Tasks&apos; working directories and all their contents.  When a Delete Job request is received, the Batch service sets the Job to the deleting state. All update operations on a Job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the Job is being deleted. </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Delete(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string,
        ///     displayName: string,
        ///     commandLine: string,
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string,
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string,
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string,
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         },
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition
        ///         }
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string,
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string,
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string,
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string,
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption,
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string,
        ///         cloudServiceConfiguration: {
        ///           osFamily: string,
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           },
        ///           nodeAgentSKUId: string,
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number,
        ///               caching: CachingType,
        ///               diskSizeGB: number,
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType,
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string,
        ///               publisher: string,
        ///               type: string,
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string,
        ///                 protocol: InboundEndpointProtocol,
        ///                 backendPort: number,
        ///                 frontendPortRangeStart: number,
        ///                 frontendPortRangeEnd: number,
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number,
        ///                     access: NetworkSecurityGroupRuleAccess,
        ///                     sourceAddressPrefix: string,
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ]
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string,
        ///             thumbprintAlgorithm: string,
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string,
        ///             password: string,
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string,
        ///               containerName: string,
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string,
        ///               source: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string,
        ///               password: string
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string,
        ///               azureFileUrl: string,
        ///               accountKey: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory,
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string,
        ///     startTime: string (ISO 8601 Format),
        ///     lastUpdateTime: string (ISO 8601 Format),
        ///     userCPUTime: JobStatisticsUserCPUTime,
        ///     kernelCPUTime: JobStatisticsKernelCPUTime,
        ///     wallClockTime: JobStatisticsWallClockTime,
        ///     readIOps: number,
        ///     writeIOps: number,
        ///     readIOGiB: number,
        ///     writeIOGiB: number,
        ///     numSucceededTasks: number,
        ///     numFailedTasks: number,
        ///     numTaskRetries: number,
        ///     waitTime: JobStatisticsWaitTime
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetJobAsync(string jobId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.GetJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRequest(jobId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string,
        ///     displayName: string,
        ///     commandLine: string,
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string,
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string,
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string,
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         },
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition
        ///         }
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string,
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string,
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string,
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string,
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption,
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string,
        ///         cloudServiceConfiguration: {
        ///           osFamily: string,
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           },
        ///           nodeAgentSKUId: string,
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number,
        ///               caching: CachingType,
        ///               diskSizeGB: number,
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType,
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string,
        ///               publisher: string,
        ///               type: string,
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string,
        ///                 protocol: InboundEndpointProtocol,
        ///                 backendPort: number,
        ///                 frontendPortRangeStart: number,
        ///                 frontendPortRangeEnd: number,
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number,
        ///                     access: NetworkSecurityGroupRuleAccess,
        ///                     sourceAddressPrefix: string,
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ]
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string,
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string,
        ///             thumbprintAlgorithm: string,
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string,
        ///             password: string,
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string,
        ///               containerName: string,
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string,
        ///               source: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string,
        ///               password: string
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string,
        ///               azureFileUrl: string,
        ///               accountKey: string,
        ///               relativeMountPath: string,
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory,
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string,
        ///     startTime: string (ISO 8601 Format),
        ///     lastUpdateTime: string (ISO 8601 Format),
        ///     userCPUTime: JobStatisticsUserCPUTime,
        ///     kernelCPUTime: JobStatisticsKernelCPUTime,
        ///     wallClockTime: JobStatisticsWallClockTime,
        ///     readIOps: number,
        ///     writeIOps: number,
        ///     readIOGiB: number,
        ///     writeIOGiB: number,
        ///     numSucceededTasks: number,
        ///     numFailedTasks: number,
        ///     numTaskRetries: number,
        ///     waitTime: JobStatisticsWaitTime
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetJob(string jobId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.GetJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetJobRequest(jobId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   priority: number,
        ///   maxParallelTasks: number,
        ///   allowTaskPreemption: boolean,
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [
        ///               {
        ///                 username: string,
        ///                 password: string,
        ///                 registryServer: string,
        ///                 identityReference: {
        ///                   resourceId: string
        ///                 }
        ///               }
        ///             ]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: {
        ///             containerRunOptions: string,
        ///             imageName: string (required),
        ///             registry: ContainerRegistry,
        ///             workingDirectory: ContainerWorkingDirectory
        ///           },
        ///           resourceFiles: [
        ///             {
        ///               autoStorageContainerName: string,
        ///               storageContainerUrl: string,
        ///               httpUrl: string,
        ///               blobPrefix: string,
        ///               filePath: string,
        ///               fileMode: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             }
        ///           ],
        ///           environmentSettings: [
        ///             {
        ///               name: string (required),
        ///               value: string
        ///             }
        ///           ],
        ///           userIdentity: {
        ///             username: string,
        ///             autoUser: {
        ///               scope: AutoUserScope,
        ///               elevationLevel: ElevationLevel
        ///             }
        ///           },
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string (required),
        ///             version: string
        ///           }
        ///         ],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   metadata: [MetadataItem]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchAsync(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This replaces only the Job properties specified in the request. For example, if the Job has constraints, and a request does not specify the constraints element, then the Job keeps the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   priority: number,
        ///   maxParallelTasks: number,
        ///   allowTaskPreemption: boolean,
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [
        ///               {
        ///                 username: string,
        ///                 password: string,
        ///                 registryServer: string,
        ///                 identityReference: {
        ///                   resourceId: string
        ///                 }
        ///               }
        ///             ]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: {
        ///             containerRunOptions: string,
        ///             imageName: string (required),
        ///             registry: ContainerRegistry,
        ///             workingDirectory: ContainerWorkingDirectory
        ///           },
        ///           resourceFiles: [
        ///             {
        ///               autoStorageContainerName: string,
        ///               storageContainerUrl: string,
        ///               httpUrl: string,
        ///               blobPrefix: string,
        ///               filePath: string,
        ///               fileMode: string,
        ///               identityReference: ComputeNodeIdentityReference
        ///             }
        ///           ],
        ///           environmentSettings: [
        ///             {
        ///               name: string (required),
        ///               value: string
        ///             }
        ///           ],
        ///           userIdentity: {
        ///             username: string,
        ///             autoUser: {
        ///               scope: AutoUserScope,
        ///               elevationLevel: ElevationLevel
        ///             }
        ///           },
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string (required),
        ///             version: string
        ///           }
        ///         ],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   metadata: [MetadataItem]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Patch(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string (required),
        ///     displayName: string,
        ///     commandLine: string (required),
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string (required),
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string (required),
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string (required),
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string (required),
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         } (required),
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition (required)
        ///         } (required)
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string (required),
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string (required),
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string (required)
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format) (required),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory (required),
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateAsync(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This fully replaces all the updatable properties of the Job. For example, if the Job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints. </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string (required),
        ///     displayName: string,
        ///     commandLine: string (required),
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string (required),
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string (required),
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string (required),
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string (required),
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         } (required),
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition (required)
        ///         } (required)
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string (required),
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string (required),
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string (required)
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format) (required),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory (required),
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Update(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Update");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409. </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   disableTasks: DisableJobOption (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DisableAsync(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Disable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Batch Service immediately moves the Job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running Tasks of the Job. The Job remains in the disabling state until the disable operation is completed and all Tasks have been dealt with according to the disableTasks option; the Job then moves to the disabled state. No new Tasks are started under the Job until it moves back to active state. If you try to disable a Job that is in any state other than active, disabling, or disabled, the request fails with status code 409. </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   disableTasks: DisableJobOption (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Disable(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Disable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run. </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> EnableAsync(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Enable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When you call this API, the Batch service sets a disabled Job to the enabling state. After the this operation is completed, the Job moves to the active state, and scheduling of new Tasks under the Job resumes. The Batch service does not allow a Task to remain in the active state for more than 180 days. Therefore, if you enable a Job containing active Tasks which were added more than 180 days ago, those Tasks will not run. </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Enable(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Enable");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled. </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   terminateReason: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> TerminateAsync(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Terminate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> When a Terminate Job request is received, the Batch service sets the Job to the terminating state. The Batch service then terminates any running Tasks associated with the Job and runs any required Job release Tasks. Then the Job moves into the completed state. If there are any Tasks in the Job in the active state, they will remain in the active state. Once a Job is terminated, new Tasks cannot be added and any remaining active Tasks will not be scheduled. </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   terminateReason: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Terminate(string jobId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Terminate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTerminateRequest(jobId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string (required),
        ///     displayName: string,
        ///     commandLine: string (required),
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string (required),
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string (required),
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string (required),
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string (required),
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         } (required),
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition (required)
        ///         } (required)
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string (required),
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string (required),
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string (required)
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format) (required),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory (required),
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddAsync(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> The Batch service supports two ways to control the work done as part of a Job. In the first approach, the user specifies a Job Manager Task. The Batch service launches this Task when it is ready to start the Job. The Job Manager Task controls all other Tasks that run under this Job, by using the Task APIs. In the second approach, the user directly controls the execution of Tasks under an active Job, by using the Task APIs. Also note: when naming Jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers. </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   id: string,
        ///   displayName: string,
        ///   usesTaskDependencies: boolean,
        ///   url: string,
        ///   eTag: string,
        ///   lastModified: string (ISO 8601 Format),
        ///   creationTime: string (ISO 8601 Format),
        ///   state: JobState,
        ///   stateTransitionTime: string (ISO 8601 Format),
        ///   previousState: JobState,
        ///   previousStateTransitionTime: string (ISO 8601 Format),
        ///   priority: number,
        ///   allowTaskPreemption: boolean,
        ///   maxParallelTasks: number,
        ///   constraints: {
        ///     maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///     maxTaskRetryCount: number
        ///   },
        ///   jobManagerTask: {
        ///     id: string (required),
        ///     displayName: string,
        ///     commandLine: string (required),
        ///     containerSettings: {
        ///       containerRunOptions: string,
        ///       imageName: string (required),
        ///       registry: {
        ///         username: string,
        ///         password: string,
        ///         registryServer: string,
        ///         identityReference: {
        ///           resourceId: string
        ///         }
        ///       },
        ///       workingDirectory: ContainerWorkingDirectory
        ///     },
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string,
        ///         storageContainerUrl: string,
        ///         httpUrl: string,
        ///         blobPrefix: string,
        ///         filePath: string,
        ///         fileMode: string,
        ///         identityReference: ComputeNodeIdentityReference
        ///       }
        ///     ],
        ///     outputFiles: [
        ///       {
        ///         filePattern: string (required),
        ///         destination: {
        ///           container: {
        ///             path: string,
        ///             containerUrl: string (required),
        ///             identityReference: ComputeNodeIdentityReference,
        ///             uploadHeaders: [
        ///               {
        ///                 name: string (required),
        ///                 value: string
        ///               }
        ///             ]
        ///           }
        ///         } (required),
        ///         uploadOptions: {
        ///           uploadCondition: OutputFileUploadCondition (required)
        ///         } (required)
        ///       }
        ///     ],
        ///     environmentSettings: [
        ///       {
        ///         name: string (required),
        ///         value: string
        ///       }
        ///     ],
        ///     constraints: {
        ///       maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///       retentionTime: TaskConstraintsRetentionTime,
        ///       maxTaskRetryCount: number
        ///     },
        ///     requiredSlots: number,
        ///     killJobOnCompletion: boolean,
        ///     userIdentity: {
        ///       username: string,
        ///       autoUser: {
        ///         scope: AutoUserScope,
        ///         elevationLevel: ElevationLevel
        ///       }
        ///     },
        ///     runExclusive: boolean,
        ///     applicationPackageReferences: [
        ///       {
        ///         applicationId: string (required),
        ///         version: string
        ///       }
        ///     ],
        ///     authenticationTokenSettings: {
        ///       access: [AccessScope]
        ///     },
        ///     allowLowPriorityNode: boolean
        ///   },
        ///   jobPreparationTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     constraints: TaskConstraints,
        ///     waitForSuccess: boolean,
        ///     userIdentity: UserIdentity,
        ///     rerunOnNodeRebootAfterSuccess: boolean
        ///   },
        ///   jobReleaseTask: {
        ///     id: string,
        ///     commandLine: string (required),
        ///     containerSettings: TaskContainerSettings,
        ///     resourceFiles: [ResourceFile],
        ///     environmentSettings: [EnvironmentSetting],
        ///     maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///     retentionTime: JobReleaseTaskRetentionTime,
        ///     userIdentity: UserIdentity
        ///   },
        ///   commonEnvironmentSettings: [EnvironmentSetting],
        ///   poolInfo: {
        ///     poolId: string,
        ///     autoPoolSpecification: {
        ///       autoPoolIdPrefix: string,
        ///       poolLifetimeOption: PoolLifetimeOption (required),
        ///       keepAlive: boolean,
        ///       pool: {
        ///         displayName: string,
        ///         vmSize: string (required),
        ///         cloudServiceConfiguration: {
        ///           osFamily: string (required),
        ///           osVersion: string
        ///         },
        ///         virtualMachineConfiguration: {
        ///           imageReference: {
        ///             publisher: string,
        ///             offer: string,
        ///             sku: string,
        ///             version: string,
        ///             virtualMachineImageId: string,
        ///             exactVersion: string
        ///           } (required),
        ///           nodeAgentSKUId: string (required),
        ///           windowsConfiguration: {
        ///             enableAutomaticUpdates: boolean
        ///           },
        ///           dataDisks: [
        ///             {
        ///               lun: number (required),
        ///               caching: CachingType,
        ///               diskSizeGB: number (required),
        ///               storageAccountType: StorageAccountType
        ///             }
        ///           ],
        ///           licenseType: string,
        ///           containerConfiguration: {
        ///             type: ContainerType (required),
        ///             containerImageNames: [string],
        ///             containerRegistries: [ContainerRegistry]
        ///           },
        ///           diskEncryptionConfiguration: {
        ///             targets: [DiskEncryptionTarget]
        ///           },
        ///           nodePlacementConfiguration: {
        ///             policy: NodePlacementPolicyType
        ///           },
        ///           extensions: [
        ///             {
        ///               name: string (required),
        ///               publisher: string (required),
        ///               type: string (required),
        ///               typeHandlerVersion: string,
        ///               autoUpgradeMinorVersion: boolean,
        ///               settings: AnyObject,
        ///               protectedSettings: AnyObject,
        ///               provisionAfterExtensions: [string]
        ///             }
        ///           ],
        ///           osDisk: {
        ///             ephemeralOSDiskSettings: {
        ///               placement: DiffDiskPlacement
        ///             }
        ///           }
        ///         },
        ///         taskSlotsPerNode: number,
        ///         taskSchedulingPolicy: {
        ///           nodeFillType: ComputeNodeFillType (required)
        ///         },
        ///         resizeTimeout: PoolSpecificationResizeTimeout,
        ///         targetDedicatedNodes: number,
        ///         targetLowPriorityNodes: number,
        ///         enableAutoScale: boolean,
        ///         autoScaleFormula: string,
        ///         autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///         enableInterNodeCommunication: boolean,
        ///         networkConfiguration: {
        ///           subnetId: string,
        ///           dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///           endpointConfiguration: {
        ///             inboundNATPools: [
        ///               {
        ///                 name: string (required),
        ///                 protocol: InboundEndpointProtocol (required),
        ///                 backendPort: number (required),
        ///                 frontendPortRangeStart: number (required),
        ///                 frontendPortRangeEnd: number (required),
        ///                 networkSecurityGroupRules: [
        ///                   {
        ///                     priority: number (required),
        ///                     access: NetworkSecurityGroupRuleAccess (required),
        ///                     sourceAddressPrefix: string (required),
        ///                     sourcePortRanges: [string]
        ///                   }
        ///                 ]
        ///               }
        ///             ] (required)
        ///           },
        ///           publicIPAddressConfiguration: {
        ///             provision: IPAddressProvisioningType,
        ///             ipAddressIds: [string]
        ///           }
        ///         },
        ///         startTask: {
        ///           commandLine: string (required),
        ///           containerSettings: TaskContainerSettings,
        ///           resourceFiles: [ResourceFile],
        ///           environmentSettings: [EnvironmentSetting],
        ///           userIdentity: UserIdentity,
        ///           maxTaskRetryCount: number,
        ///           waitForSuccess: boolean
        ///         },
        ///         certificateReferences: [
        ///           {
        ///             thumbprint: string (required),
        ///             thumbprintAlgorithm: string (required),
        ///             storeLocation: CertificateStoreLocation,
        ///             storeName: string,
        ///             visibility: [CertificateVisibility]
        ///           }
        ///         ],
        ///         applicationPackageReferences: [ApplicationPackageReference],
        ///         applicationLicenses: [string],
        ///         userAccounts: [
        ///           {
        ///             name: string (required),
        ///             password: string (required),
        ///             elevationLevel: ElevationLevel,
        ///             linuxUserConfiguration: {
        ///               uid: number,
        ///               gid: number,
        ///               sshPrivateKey: string
        ///             },
        ///             windowsUserConfiguration: {
        ///               loginMode: LoginMode
        ///             }
        ///           }
        ///         ],
        ///         metadata: [
        ///           {
        ///             name: string (required),
        ///             value: string (required)
        ///           }
        ///         ],
        ///         mountConfiguration: [
        ///           {
        ///             azureBlobFileSystemConfiguration: {
        ///               accountName: string (required),
        ///               containerName: string (required),
        ///               accountKey: string,
        ///               sasKey: string,
        ///               blobfuseOptions: string,
        ///               relativeMountPath: string (required),
        ///               identityReference: ComputeNodeIdentityReference
        ///             },
        ///             nfsMountConfiguration: {
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             },
        ///             cifsMountConfiguration: {
        ///               username: string (required),
        ///               source: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string,
        ///               password: string (required)
        ///             },
        ///             azureFileShareConfiguration: {
        ///               accountName: string (required),
        ///               azureFileUrl: string (required),
        ///               accountKey: string (required),
        ///               relativeMountPath: string (required),
        ///               mountOptions: string
        ///             }
        ///           }
        ///         ]
        ///       }
        ///     }
        ///   },
        ///   onAllTasksComplete: OnAllTasksComplete,
        ///   onTaskFailure: OnTaskFailure,
        ///   networkConfiguration: {
        ///     subnetId: string (required)
        ///   },
        ///   metadata: [MetadataItem],
        ///   executionInfo: {
        ///     startTime: string (ISO 8601 Format) (required),
        ///     endTime: string (ISO 8601 Format),
        ///     poolId: string,
        ///     schedulingError: {
        ///       category: ErrorCategory (required),
        ///       code: string,
        ///       message: string,
        ///       details: [
        ///         {
        ///           name: string,
        ///           value: string
        ///         }
        ///       ]
        ///     },
        ///     terminateReason: string
        ///   },
        ///   stats: {
        ///     url: string (required),
        ///     startTime: string (ISO 8601 Format) (required),
        ///     lastUpdateTime: string (ISO 8601 Format) (required),
        ///     userCPUTime: JobStatisticsUserCPUTime (required),
        ///     kernelCPUTime: JobStatisticsKernelCPUTime (required),
        ///     wallClockTime: JobStatisticsWallClockTime (required),
        ///     readIOps: number (required),
        ///     writeIOps: number (required),
        ///     readIOGiB: number (required),
        ///     writeIOGiB: number (required),
        ///     numSucceededTasks: number (required),
        ///     numFailedTasks: number (required),
        ///     numTaskRetries: number (required),
        ///     waitTime: JobStatisticsWaitTime (required)
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Add(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("JobClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   taskCounts: {
        ///     active: number,
        ///     running: number,
        ///     completed: number,
        ///     succeeded: number,
        ///     failed: number
        ///   },
        ///   taskSlotCounts: {
        ///     active: number,
        ///     running: number,
        ///     completed: number,
        ///     succeeded: number,
        ///     failed: number
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTaskCountsAsync(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.GetTaskCounts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTaskCountsRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Task counts provide a count of the Tasks by active, running or completed Task state, and a count of Tasks which succeeded or failed. Tasks in the preparing state are counted as running. Note that the numbers returned may not always be up to date. If you need exact task counts, use a list query. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   taskCounts: {
        ///     active: number,
        ///     running: number,
        ///     completed: number,
        ///     succeeded: number,
        ///     failed: number
        ///   },
        ///   taskSlotCounts: {
        ///     active: number,
        ///     running: number,
        ///     completed: number,
        ///     succeeded: number,
        ///     failed: number
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTaskCounts(string jobId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("JobClient.GetTaskCounts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTaskCountsRequest(jobId, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       usesTaskDependencies: boolean,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       priority: number,
        ///       allowTaskPreemption: boolean,
        ///       maxParallelTasks: number,
        ///       constraints: {
        ///         maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       jobManagerTask: {
        ///         id: string,
        ///         displayName: string,
        ///         commandLine: string,
        ///         containerSettings: {
        ///           containerRunOptions: string,
        ///           imageName: string,
        ///           registry: {
        ///             username: string,
        ///             password: string,
        ///             registryServer: string,
        ///             identityReference: {
        ///               resourceId: string
        ///             }
        ///           },
        ///           workingDirectory: ContainerWorkingDirectory
        ///         },
        ///         resourceFiles: [
        ///           {
        ///             autoStorageContainerName: string,
        ///             storageContainerUrl: string,
        ///             httpUrl: string,
        ///             blobPrefix: string,
        ///             filePath: string,
        ///             fileMode: string,
        ///             identityReference: ComputeNodeIdentityReference
        ///           }
        ///         ],
        ///         outputFiles: [
        ///           {
        ///             filePattern: string,
        ///             destination: {
        ///               container: {
        ///                 path: string,
        ///                 containerUrl: string,
        ///                 identityReference: ComputeNodeIdentityReference,
        ///                 uploadHeaders: [
        ///                   {
        ///                     name: string,
        ///                     value: string
        ///                   }
        ///                 ]
        ///               }
        ///             },
        ///             uploadOptions: {
        ///               uploadCondition: OutputFileUploadCondition
        ///             }
        ///           }
        ///         ],
        ///         environmentSettings: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         constraints: {
        ///           maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///           retentionTime: TaskConstraintsRetentionTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         requiredSlots: number,
        ///         killJobOnCompletion: boolean,
        ///         userIdentity: {
        ///           username: string,
        ///           autoUser: {
        ///             scope: AutoUserScope,
        ///             elevationLevel: ElevationLevel
        ///           }
        ///         },
        ///         runExclusive: boolean,
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string,
        ///             version: string
        ///           }
        ///         ],
        ///         authenticationTokenSettings: {
        ///           access: [AccessScope]
        ///         },
        ///         allowLowPriorityNode: boolean
        ///       },
        ///       jobPreparationTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         constraints: TaskConstraints,
        ///         waitForSuccess: boolean,
        ///         userIdentity: UserIdentity,
        ///         rerunOnNodeRebootAfterSuccess: boolean
        ///       },
        ///       jobReleaseTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///         retentionTime: JobReleaseTaskRetentionTime,
        ///         userIdentity: UserIdentity
        ///       },
        ///       commonEnvironmentSettings: [EnvironmentSetting],
        ///       poolInfo: {
        ///         poolId: string,
        ///         autoPoolSpecification: {
        ///           autoPoolIdPrefix: string,
        ///           poolLifetimeOption: PoolLifetimeOption,
        ///           keepAlive: boolean,
        ///           pool: {
        ///             displayName: string,
        ///             vmSize: string,
        ///             cloudServiceConfiguration: {
        ///               osFamily: string,
        ///               osVersion: string
        ///             },
        ///             virtualMachineConfiguration: {
        ///               imageReference: {
        ///                 publisher: string,
        ///                 offer: string,
        ///                 sku: string,
        ///                 version: string,
        ///                 virtualMachineImageId: string,
        ///                 exactVersion: string
        ///               },
        ///               nodeAgentSKUId: string,
        ///               windowsConfiguration: {
        ///                 enableAutomaticUpdates: boolean
        ///               },
        ///               dataDisks: [
        ///                 {
        ///                   lun: number,
        ///                   caching: CachingType,
        ///                   diskSizeGB: number,
        ///                   storageAccountType: StorageAccountType
        ///                 }
        ///               ],
        ///               licenseType: string,
        ///               containerConfiguration: {
        ///                 type: ContainerType,
        ///                 containerImageNames: [string],
        ///                 containerRegistries: [ContainerRegistry]
        ///               },
        ///               diskEncryptionConfiguration: {
        ///                 targets: [DiskEncryptionTarget]
        ///               },
        ///               nodePlacementConfiguration: {
        ///                 policy: NodePlacementPolicyType
        ///               },
        ///               extensions: [
        ///                 {
        ///                   name: string,
        ///                   publisher: string,
        ///                   type: string,
        ///                   typeHandlerVersion: string,
        ///                   autoUpgradeMinorVersion: boolean,
        ///                   settings: AnyObject,
        ///                   protectedSettings: AnyObject,
        ///                   provisionAfterExtensions: [string]
        ///                 }
        ///               ],
        ///               osDisk: {
        ///                 ephemeralOSDiskSettings: {
        ///                   placement: DiffDiskPlacement
        ///                 }
        ///               }
        ///             },
        ///             taskSlotsPerNode: number,
        ///             taskSchedulingPolicy: {
        ///               nodeFillType: ComputeNodeFillType
        ///             },
        ///             resizeTimeout: PoolSpecificationResizeTimeout,
        ///             targetDedicatedNodes: number,
        ///             targetLowPriorityNodes: number,
        ///             enableAutoScale: boolean,
        ///             autoScaleFormula: string,
        ///             autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///             enableInterNodeCommunication: boolean,
        ///             networkConfiguration: {
        ///               subnetId: string,
        ///               dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///               endpointConfiguration: {
        ///                 inboundNATPools: [
        ///                   {
        ///                     name: string,
        ///                     protocol: InboundEndpointProtocol,
        ///                     backendPort: number,
        ///                     frontendPortRangeStart: number,
        ///                     frontendPortRangeEnd: number,
        ///                     networkSecurityGroupRules: [
        ///                       {
        ///                         priority: number,
        ///                         access: NetworkSecurityGroupRuleAccess,
        ///                         sourceAddressPrefix: string,
        ///                         sourcePortRanges: [string]
        ///                       }
        ///                     ]
        ///                   }
        ///                 ]
        ///               },
        ///               publicIPAddressConfiguration: {
        ///                 provision: IPAddressProvisioningType,
        ///                 ipAddressIds: [string]
        ///               }
        ///             },
        ///             startTask: {
        ///               commandLine: string,
        ///               containerSettings: TaskContainerSettings,
        ///               resourceFiles: [ResourceFile],
        ///               environmentSettings: [EnvironmentSetting],
        ///               userIdentity: UserIdentity,
        ///               maxTaskRetryCount: number,
        ///               waitForSuccess: boolean
        ///             },
        ///             certificateReferences: [
        ///               {
        ///                 thumbprint: string,
        ///                 thumbprintAlgorithm: string,
        ///                 storeLocation: CertificateStoreLocation,
        ///                 storeName: string,
        ///                 visibility: [CertificateVisibility]
        ///               }
        ///             ],
        ///             applicationPackageReferences: [ApplicationPackageReference],
        ///             applicationLicenses: [string],
        ///             userAccounts: [
        ///               {
        ///                 name: string,
        ///                 password: string,
        ///                 elevationLevel: ElevationLevel,
        ///                 linuxUserConfiguration: {
        ///                   uid: number,
        ///                   gid: number,
        ///                   sshPrivateKey: string
        ///                 },
        ///                 windowsUserConfiguration: {
        ///                   loginMode: LoginMode
        ///                 }
        ///               }
        ///             ],
        ///             metadata: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ],
        ///             mountConfiguration: [
        ///               {
        ///                 azureBlobFileSystemConfiguration: {
        ///                   accountName: string,
        ///                   containerName: string,
        ///                   accountKey: string,
        ///                   sasKey: string,
        ///                   blobfuseOptions: string,
        ///                   relativeMountPath: string,
        ///                   identityReference: ComputeNodeIdentityReference
        ///                 },
        ///                 nfsMountConfiguration: {
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 },
        ///                 cifsMountConfiguration: {
        ///                   username: string,
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string,
        ///                   password: string
        ///                 },
        ///                 azureFileShareConfiguration: {
        ///                   accountName: string,
        ///                   azureFileUrl: string,
        ///                   accountKey: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 }
        ///               }
        ///             ]
        ///           }
        ///         }
        ///       },
        ///       onAllTasksComplete: OnAllTasksComplete,
        ///       onTaskFailure: OnTaskFailure,
        ///       networkConfiguration: {
        ///         subnetId: string
        ///       },
        ///       metadata: [MetadataItem],
        ///       executionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         poolId: string,
        ///         schedulingError: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         terminateReason: string
        ///       },
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobStatisticsUserCPUTime,
        ///         kernelCPUTime: JobStatisticsKernelCPUTime,
        ///         wallClockTime: JobStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetJobsAsync(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "JobClient.GetJobs");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetJobsRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetJobsNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       usesTaskDependencies: boolean,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       priority: number,
        ///       allowTaskPreemption: boolean,
        ///       maxParallelTasks: number,
        ///       constraints: {
        ///         maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       jobManagerTask: {
        ///         id: string,
        ///         displayName: string,
        ///         commandLine: string,
        ///         containerSettings: {
        ///           containerRunOptions: string,
        ///           imageName: string,
        ///           registry: {
        ///             username: string,
        ///             password: string,
        ///             registryServer: string,
        ///             identityReference: {
        ///               resourceId: string
        ///             }
        ///           },
        ///           workingDirectory: ContainerWorkingDirectory
        ///         },
        ///         resourceFiles: [
        ///           {
        ///             autoStorageContainerName: string,
        ///             storageContainerUrl: string,
        ///             httpUrl: string,
        ///             blobPrefix: string,
        ///             filePath: string,
        ///             fileMode: string,
        ///             identityReference: ComputeNodeIdentityReference
        ///           }
        ///         ],
        ///         outputFiles: [
        ///           {
        ///             filePattern: string,
        ///             destination: {
        ///               container: {
        ///                 path: string,
        ///                 containerUrl: string,
        ///                 identityReference: ComputeNodeIdentityReference,
        ///                 uploadHeaders: [
        ///                   {
        ///                     name: string,
        ///                     value: string
        ///                   }
        ///                 ]
        ///               }
        ///             },
        ///             uploadOptions: {
        ///               uploadCondition: OutputFileUploadCondition
        ///             }
        ///           }
        ///         ],
        ///         environmentSettings: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         constraints: {
        ///           maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///           retentionTime: TaskConstraintsRetentionTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         requiredSlots: number,
        ///         killJobOnCompletion: boolean,
        ///         userIdentity: {
        ///           username: string,
        ///           autoUser: {
        ///             scope: AutoUserScope,
        ///             elevationLevel: ElevationLevel
        ///           }
        ///         },
        ///         runExclusive: boolean,
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string,
        ///             version: string
        ///           }
        ///         ],
        ///         authenticationTokenSettings: {
        ///           access: [AccessScope]
        ///         },
        ///         allowLowPriorityNode: boolean
        ///       },
        ///       jobPreparationTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         constraints: TaskConstraints,
        ///         waitForSuccess: boolean,
        ///         userIdentity: UserIdentity,
        ///         rerunOnNodeRebootAfterSuccess: boolean
        ///       },
        ///       jobReleaseTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///         retentionTime: JobReleaseTaskRetentionTime,
        ///         userIdentity: UserIdentity
        ///       },
        ///       commonEnvironmentSettings: [EnvironmentSetting],
        ///       poolInfo: {
        ///         poolId: string,
        ///         autoPoolSpecification: {
        ///           autoPoolIdPrefix: string,
        ///           poolLifetimeOption: PoolLifetimeOption,
        ///           keepAlive: boolean,
        ///           pool: {
        ///             displayName: string,
        ///             vmSize: string,
        ///             cloudServiceConfiguration: {
        ///               osFamily: string,
        ///               osVersion: string
        ///             },
        ///             virtualMachineConfiguration: {
        ///               imageReference: {
        ///                 publisher: string,
        ///                 offer: string,
        ///                 sku: string,
        ///                 version: string,
        ///                 virtualMachineImageId: string,
        ///                 exactVersion: string
        ///               },
        ///               nodeAgentSKUId: string,
        ///               windowsConfiguration: {
        ///                 enableAutomaticUpdates: boolean
        ///               },
        ///               dataDisks: [
        ///                 {
        ///                   lun: number,
        ///                   caching: CachingType,
        ///                   diskSizeGB: number,
        ///                   storageAccountType: StorageAccountType
        ///                 }
        ///               ],
        ///               licenseType: string,
        ///               containerConfiguration: {
        ///                 type: ContainerType,
        ///                 containerImageNames: [string],
        ///                 containerRegistries: [ContainerRegistry]
        ///               },
        ///               diskEncryptionConfiguration: {
        ///                 targets: [DiskEncryptionTarget]
        ///               },
        ///               nodePlacementConfiguration: {
        ///                 policy: NodePlacementPolicyType
        ///               },
        ///               extensions: [
        ///                 {
        ///                   name: string,
        ///                   publisher: string,
        ///                   type: string,
        ///                   typeHandlerVersion: string,
        ///                   autoUpgradeMinorVersion: boolean,
        ///                   settings: AnyObject,
        ///                   protectedSettings: AnyObject,
        ///                   provisionAfterExtensions: [string]
        ///                 }
        ///               ],
        ///               osDisk: {
        ///                 ephemeralOSDiskSettings: {
        ///                   placement: DiffDiskPlacement
        ///                 }
        ///               }
        ///             },
        ///             taskSlotsPerNode: number,
        ///             taskSchedulingPolicy: {
        ///               nodeFillType: ComputeNodeFillType
        ///             },
        ///             resizeTimeout: PoolSpecificationResizeTimeout,
        ///             targetDedicatedNodes: number,
        ///             targetLowPriorityNodes: number,
        ///             enableAutoScale: boolean,
        ///             autoScaleFormula: string,
        ///             autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///             enableInterNodeCommunication: boolean,
        ///             networkConfiguration: {
        ///               subnetId: string,
        ///               dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///               endpointConfiguration: {
        ///                 inboundNATPools: [
        ///                   {
        ///                     name: string,
        ///                     protocol: InboundEndpointProtocol,
        ///                     backendPort: number,
        ///                     frontendPortRangeStart: number,
        ///                     frontendPortRangeEnd: number,
        ///                     networkSecurityGroupRules: [
        ///                       {
        ///                         priority: number,
        ///                         access: NetworkSecurityGroupRuleAccess,
        ///                         sourceAddressPrefix: string,
        ///                         sourcePortRanges: [string]
        ///                       }
        ///                     ]
        ///                   }
        ///                 ]
        ///               },
        ///               publicIPAddressConfiguration: {
        ///                 provision: IPAddressProvisioningType,
        ///                 ipAddressIds: [string]
        ///               }
        ///             },
        ///             startTask: {
        ///               commandLine: string,
        ///               containerSettings: TaskContainerSettings,
        ///               resourceFiles: [ResourceFile],
        ///               environmentSettings: [EnvironmentSetting],
        ///               userIdentity: UserIdentity,
        ///               maxTaskRetryCount: number,
        ///               waitForSuccess: boolean
        ///             },
        ///             certificateReferences: [
        ///               {
        ///                 thumbprint: string,
        ///                 thumbprintAlgorithm: string,
        ///                 storeLocation: CertificateStoreLocation,
        ///                 storeName: string,
        ///                 visibility: [CertificateVisibility]
        ///               }
        ///             ],
        ///             applicationPackageReferences: [ApplicationPackageReference],
        ///             applicationLicenses: [string],
        ///             userAccounts: [
        ///               {
        ///                 name: string,
        ///                 password: string,
        ///                 elevationLevel: ElevationLevel,
        ///                 linuxUserConfiguration: {
        ///                   uid: number,
        ///                   gid: number,
        ///                   sshPrivateKey: string
        ///                 },
        ///                 windowsUserConfiguration: {
        ///                   loginMode: LoginMode
        ///                 }
        ///               }
        ///             ],
        ///             metadata: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ],
        ///             mountConfiguration: [
        ///               {
        ///                 azureBlobFileSystemConfiguration: {
        ///                   accountName: string,
        ///                   containerName: string,
        ///                   accountKey: string,
        ///                   sasKey: string,
        ///                   blobfuseOptions: string,
        ///                   relativeMountPath: string,
        ///                   identityReference: ComputeNodeIdentityReference
        ///                 },
        ///                 nfsMountConfiguration: {
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 },
        ///                 cifsMountConfiguration: {
        ///                   username: string,
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string,
        ///                   password: string
        ///                 },
        ///                 azureFileShareConfiguration: {
        ///                   accountName: string,
        ///                   azureFileUrl: string,
        ///                   accountKey: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 }
        ///               }
        ///             ]
        ///           }
        ///         }
        ///       },
        ///       onAllTasksComplete: OnAllTasksComplete,
        ///       onTaskFailure: OnTaskFailure,
        ///       networkConfiguration: {
        ///         subnetId: string
        ///       },
        ///       metadata: [MetadataItem],
        ///       executionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         poolId: string,
        ///         schedulingError: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         terminateReason: string
        ///       },
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobStatisticsUserCPUTime,
        ///         kernelCPUTime: JobStatisticsKernelCPUTime,
        ///         wallClockTime: JobStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetJobs(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "JobClient.GetJobs");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetJobsRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetJobsNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       usesTaskDependencies: boolean,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       priority: number,
        ///       allowTaskPreemption: boolean,
        ///       maxParallelTasks: number,
        ///       constraints: {
        ///         maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       jobManagerTask: {
        ///         id: string,
        ///         displayName: string,
        ///         commandLine: string,
        ///         containerSettings: {
        ///           containerRunOptions: string,
        ///           imageName: string,
        ///           registry: {
        ///             username: string,
        ///             password: string,
        ///             registryServer: string,
        ///             identityReference: {
        ///               resourceId: string
        ///             }
        ///           },
        ///           workingDirectory: ContainerWorkingDirectory
        ///         },
        ///         resourceFiles: [
        ///           {
        ///             autoStorageContainerName: string,
        ///             storageContainerUrl: string,
        ///             httpUrl: string,
        ///             blobPrefix: string,
        ///             filePath: string,
        ///             fileMode: string,
        ///             identityReference: ComputeNodeIdentityReference
        ///           }
        ///         ],
        ///         outputFiles: [
        ///           {
        ///             filePattern: string,
        ///             destination: {
        ///               container: {
        ///                 path: string,
        ///                 containerUrl: string,
        ///                 identityReference: ComputeNodeIdentityReference,
        ///                 uploadHeaders: [
        ///                   {
        ///                     name: string,
        ///                     value: string
        ///                   }
        ///                 ]
        ///               }
        ///             },
        ///             uploadOptions: {
        ///               uploadCondition: OutputFileUploadCondition
        ///             }
        ///           }
        ///         ],
        ///         environmentSettings: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         constraints: {
        ///           maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///           retentionTime: TaskConstraintsRetentionTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         requiredSlots: number,
        ///         killJobOnCompletion: boolean,
        ///         userIdentity: {
        ///           username: string,
        ///           autoUser: {
        ///             scope: AutoUserScope,
        ///             elevationLevel: ElevationLevel
        ///           }
        ///         },
        ///         runExclusive: boolean,
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string,
        ///             version: string
        ///           }
        ///         ],
        ///         authenticationTokenSettings: {
        ///           access: [AccessScope]
        ///         },
        ///         allowLowPriorityNode: boolean
        ///       },
        ///       jobPreparationTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         constraints: TaskConstraints,
        ///         waitForSuccess: boolean,
        ///         userIdentity: UserIdentity,
        ///         rerunOnNodeRebootAfterSuccess: boolean
        ///       },
        ///       jobReleaseTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///         retentionTime: JobReleaseTaskRetentionTime,
        ///         userIdentity: UserIdentity
        ///       },
        ///       commonEnvironmentSettings: [EnvironmentSetting],
        ///       poolInfo: {
        ///         poolId: string,
        ///         autoPoolSpecification: {
        ///           autoPoolIdPrefix: string,
        ///           poolLifetimeOption: PoolLifetimeOption,
        ///           keepAlive: boolean,
        ///           pool: {
        ///             displayName: string,
        ///             vmSize: string,
        ///             cloudServiceConfiguration: {
        ///               osFamily: string,
        ///               osVersion: string
        ///             },
        ///             virtualMachineConfiguration: {
        ///               imageReference: {
        ///                 publisher: string,
        ///                 offer: string,
        ///                 sku: string,
        ///                 version: string,
        ///                 virtualMachineImageId: string,
        ///                 exactVersion: string
        ///               },
        ///               nodeAgentSKUId: string,
        ///               windowsConfiguration: {
        ///                 enableAutomaticUpdates: boolean
        ///               },
        ///               dataDisks: [
        ///                 {
        ///                   lun: number,
        ///                   caching: CachingType,
        ///                   diskSizeGB: number,
        ///                   storageAccountType: StorageAccountType
        ///                 }
        ///               ],
        ///               licenseType: string,
        ///               containerConfiguration: {
        ///                 type: ContainerType,
        ///                 containerImageNames: [string],
        ///                 containerRegistries: [ContainerRegistry]
        ///               },
        ///               diskEncryptionConfiguration: {
        ///                 targets: [DiskEncryptionTarget]
        ///               },
        ///               nodePlacementConfiguration: {
        ///                 policy: NodePlacementPolicyType
        ///               },
        ///               extensions: [
        ///                 {
        ///                   name: string,
        ///                   publisher: string,
        ///                   type: string,
        ///                   typeHandlerVersion: string,
        ///                   autoUpgradeMinorVersion: boolean,
        ///                   settings: AnyObject,
        ///                   protectedSettings: AnyObject,
        ///                   provisionAfterExtensions: [string]
        ///                 }
        ///               ],
        ///               osDisk: {
        ///                 ephemeralOSDiskSettings: {
        ///                   placement: DiffDiskPlacement
        ///                 }
        ///               }
        ///             },
        ///             taskSlotsPerNode: number,
        ///             taskSchedulingPolicy: {
        ///               nodeFillType: ComputeNodeFillType
        ///             },
        ///             resizeTimeout: PoolSpecificationResizeTimeout,
        ///             targetDedicatedNodes: number,
        ///             targetLowPriorityNodes: number,
        ///             enableAutoScale: boolean,
        ///             autoScaleFormula: string,
        ///             autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///             enableInterNodeCommunication: boolean,
        ///             networkConfiguration: {
        ///               subnetId: string,
        ///               dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///               endpointConfiguration: {
        ///                 inboundNATPools: [
        ///                   {
        ///                     name: string,
        ///                     protocol: InboundEndpointProtocol,
        ///                     backendPort: number,
        ///                     frontendPortRangeStart: number,
        ///                     frontendPortRangeEnd: number,
        ///                     networkSecurityGroupRules: [
        ///                       {
        ///                         priority: number,
        ///                         access: NetworkSecurityGroupRuleAccess,
        ///                         sourceAddressPrefix: string,
        ///                         sourcePortRanges: [string]
        ///                       }
        ///                     ]
        ///                   }
        ///                 ]
        ///               },
        ///               publicIPAddressConfiguration: {
        ///                 provision: IPAddressProvisioningType,
        ///                 ipAddressIds: [string]
        ///               }
        ///             },
        ///             startTask: {
        ///               commandLine: string,
        ///               containerSettings: TaskContainerSettings,
        ///               resourceFiles: [ResourceFile],
        ///               environmentSettings: [EnvironmentSetting],
        ///               userIdentity: UserIdentity,
        ///               maxTaskRetryCount: number,
        ///               waitForSuccess: boolean
        ///             },
        ///             certificateReferences: [
        ///               {
        ///                 thumbprint: string,
        ///                 thumbprintAlgorithm: string,
        ///                 storeLocation: CertificateStoreLocation,
        ///                 storeName: string,
        ///                 visibility: [CertificateVisibility]
        ///               }
        ///             ],
        ///             applicationPackageReferences: [ApplicationPackageReference],
        ///             applicationLicenses: [string],
        ///             userAccounts: [
        ///               {
        ///                 name: string,
        ///                 password: string,
        ///                 elevationLevel: ElevationLevel,
        ///                 linuxUserConfiguration: {
        ///                   uid: number,
        ///                   gid: number,
        ///                   sshPrivateKey: string
        ///                 },
        ///                 windowsUserConfiguration: {
        ///                   loginMode: LoginMode
        ///                 }
        ///               }
        ///             ],
        ///             metadata: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ],
        ///             mountConfiguration: [
        ///               {
        ///                 azureBlobFileSystemConfiguration: {
        ///                   accountName: string,
        ///                   containerName: string,
        ///                   accountKey: string,
        ///                   sasKey: string,
        ///                   blobfuseOptions: string,
        ///                   relativeMountPath: string,
        ///                   identityReference: ComputeNodeIdentityReference
        ///                 },
        ///                 nfsMountConfiguration: {
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 },
        ///                 cifsMountConfiguration: {
        ///                   username: string,
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string,
        ///                   password: string
        ///                 },
        ///                 azureFileShareConfiguration: {
        ///                   accountName: string,
        ///                   azureFileUrl: string,
        ///                   accountKey: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 }
        ///               }
        ///             ]
        ///           }
        ///         }
        ///       },
        ///       onAllTasksComplete: OnAllTasksComplete,
        ///       onTaskFailure: OnTaskFailure,
        ///       networkConfiguration: {
        ///         subnetId: string
        ///       },
        ///       metadata: [MetadataItem],
        ///       executionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         poolId: string,
        ///         schedulingError: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         terminateReason: string
        ///       },
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobStatisticsUserCPUTime,
        ///         kernelCPUTime: JobStatisticsKernelCPUTime,
        ///         wallClockTime: JobStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetFromJobSchedulesAsync(string jobScheduleId, string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "JobClient.GetFromJobSchedules");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetFromJobSchedulesRequest(jobScheduleId, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetFromJobSchedulesNextPageRequest(nextLink, jobScheduleId, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Jobs can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       id: string,
        ///       displayName: string,
        ///       usesTaskDependencies: boolean,
        ///       url: string,
        ///       eTag: string,
        ///       lastModified: string (ISO 8601 Format),
        ///       creationTime: string (ISO 8601 Format),
        ///       state: JobState,
        ///       stateTransitionTime: string (ISO 8601 Format),
        ///       previousState: JobState,
        ///       previousStateTransitionTime: string (ISO 8601 Format),
        ///       priority: number,
        ///       allowTaskPreemption: boolean,
        ///       maxParallelTasks: number,
        ///       constraints: {
        ///         maxWallClockTime: JobConstraintsMaxWallClockTime,
        ///         maxTaskRetryCount: number
        ///       },
        ///       jobManagerTask: {
        ///         id: string,
        ///         displayName: string,
        ///         commandLine: string,
        ///         containerSettings: {
        ///           containerRunOptions: string,
        ///           imageName: string,
        ///           registry: {
        ///             username: string,
        ///             password: string,
        ///             registryServer: string,
        ///             identityReference: {
        ///               resourceId: string
        ///             }
        ///           },
        ///           workingDirectory: ContainerWorkingDirectory
        ///         },
        ///         resourceFiles: [
        ///           {
        ///             autoStorageContainerName: string,
        ///             storageContainerUrl: string,
        ///             httpUrl: string,
        ///             blobPrefix: string,
        ///             filePath: string,
        ///             fileMode: string,
        ///             identityReference: ComputeNodeIdentityReference
        ///           }
        ///         ],
        ///         outputFiles: [
        ///           {
        ///             filePattern: string,
        ///             destination: {
        ///               container: {
        ///                 path: string,
        ///                 containerUrl: string,
        ///                 identityReference: ComputeNodeIdentityReference,
        ///                 uploadHeaders: [
        ///                   {
        ///                     name: string,
        ///                     value: string
        ///                   }
        ///                 ]
        ///               }
        ///             },
        ///             uploadOptions: {
        ///               uploadCondition: OutputFileUploadCondition
        ///             }
        ///           }
        ///         ],
        ///         environmentSettings: [
        ///           {
        ///             name: string,
        ///             value: string
        ///           }
        ///         ],
        ///         constraints: {
        ///           maxWallClockTime: TaskConstraintsMaxWallClockTime,
        ///           retentionTime: TaskConstraintsRetentionTime,
        ///           maxTaskRetryCount: number
        ///         },
        ///         requiredSlots: number,
        ///         killJobOnCompletion: boolean,
        ///         userIdentity: {
        ///           username: string,
        ///           autoUser: {
        ///             scope: AutoUserScope,
        ///             elevationLevel: ElevationLevel
        ///           }
        ///         },
        ///         runExclusive: boolean,
        ///         applicationPackageReferences: [
        ///           {
        ///             applicationId: string,
        ///             version: string
        ///           }
        ///         ],
        ///         authenticationTokenSettings: {
        ///           access: [AccessScope]
        ///         },
        ///         allowLowPriorityNode: boolean
        ///       },
        ///       jobPreparationTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         constraints: TaskConstraints,
        ///         waitForSuccess: boolean,
        ///         userIdentity: UserIdentity,
        ///         rerunOnNodeRebootAfterSuccess: boolean
        ///       },
        ///       jobReleaseTask: {
        ///         id: string,
        ///         commandLine: string,
        ///         containerSettings: TaskContainerSettings,
        ///         resourceFiles: [ResourceFile],
        ///         environmentSettings: [EnvironmentSetting],
        ///         maxWallClockTime: JobReleaseTaskMaxWallClockTime,
        ///         retentionTime: JobReleaseTaskRetentionTime,
        ///         userIdentity: UserIdentity
        ///       },
        ///       commonEnvironmentSettings: [EnvironmentSetting],
        ///       poolInfo: {
        ///         poolId: string,
        ///         autoPoolSpecification: {
        ///           autoPoolIdPrefix: string,
        ///           poolLifetimeOption: PoolLifetimeOption,
        ///           keepAlive: boolean,
        ///           pool: {
        ///             displayName: string,
        ///             vmSize: string,
        ///             cloudServiceConfiguration: {
        ///               osFamily: string,
        ///               osVersion: string
        ///             },
        ///             virtualMachineConfiguration: {
        ///               imageReference: {
        ///                 publisher: string,
        ///                 offer: string,
        ///                 sku: string,
        ///                 version: string,
        ///                 virtualMachineImageId: string,
        ///                 exactVersion: string
        ///               },
        ///               nodeAgentSKUId: string,
        ///               windowsConfiguration: {
        ///                 enableAutomaticUpdates: boolean
        ///               },
        ///               dataDisks: [
        ///                 {
        ///                   lun: number,
        ///                   caching: CachingType,
        ///                   diskSizeGB: number,
        ///                   storageAccountType: StorageAccountType
        ///                 }
        ///               ],
        ///               licenseType: string,
        ///               containerConfiguration: {
        ///                 type: ContainerType,
        ///                 containerImageNames: [string],
        ///                 containerRegistries: [ContainerRegistry]
        ///               },
        ///               diskEncryptionConfiguration: {
        ///                 targets: [DiskEncryptionTarget]
        ///               },
        ///               nodePlacementConfiguration: {
        ///                 policy: NodePlacementPolicyType
        ///               },
        ///               extensions: [
        ///                 {
        ///                   name: string,
        ///                   publisher: string,
        ///                   type: string,
        ///                   typeHandlerVersion: string,
        ///                   autoUpgradeMinorVersion: boolean,
        ///                   settings: AnyObject,
        ///                   protectedSettings: AnyObject,
        ///                   provisionAfterExtensions: [string]
        ///                 }
        ///               ],
        ///               osDisk: {
        ///                 ephemeralOSDiskSettings: {
        ///                   placement: DiffDiskPlacement
        ///                 }
        ///               }
        ///             },
        ///             taskSlotsPerNode: number,
        ///             taskSchedulingPolicy: {
        ///               nodeFillType: ComputeNodeFillType
        ///             },
        ///             resizeTimeout: PoolSpecificationResizeTimeout,
        ///             targetDedicatedNodes: number,
        ///             targetLowPriorityNodes: number,
        ///             enableAutoScale: boolean,
        ///             autoScaleFormula: string,
        ///             autoScaleEvaluationInterval: PoolSpecificationAutoScaleEvaluationInterval,
        ///             enableInterNodeCommunication: boolean,
        ///             networkConfiguration: {
        ///               subnetId: string,
        ///               dynamicVNetAssignmentScope: DynamicVNetAssignmentScope,
        ///               endpointConfiguration: {
        ///                 inboundNATPools: [
        ///                   {
        ///                     name: string,
        ///                     protocol: InboundEndpointProtocol,
        ///                     backendPort: number,
        ///                     frontendPortRangeStart: number,
        ///                     frontendPortRangeEnd: number,
        ///                     networkSecurityGroupRules: [
        ///                       {
        ///                         priority: number,
        ///                         access: NetworkSecurityGroupRuleAccess,
        ///                         sourceAddressPrefix: string,
        ///                         sourcePortRanges: [string]
        ///                       }
        ///                     ]
        ///                   }
        ///                 ]
        ///               },
        ///               publicIPAddressConfiguration: {
        ///                 provision: IPAddressProvisioningType,
        ///                 ipAddressIds: [string]
        ///               }
        ///             },
        ///             startTask: {
        ///               commandLine: string,
        ///               containerSettings: TaskContainerSettings,
        ///               resourceFiles: [ResourceFile],
        ///               environmentSettings: [EnvironmentSetting],
        ///               userIdentity: UserIdentity,
        ///               maxTaskRetryCount: number,
        ///               waitForSuccess: boolean
        ///             },
        ///             certificateReferences: [
        ///               {
        ///                 thumbprint: string,
        ///                 thumbprintAlgorithm: string,
        ///                 storeLocation: CertificateStoreLocation,
        ///                 storeName: string,
        ///                 visibility: [CertificateVisibility]
        ///               }
        ///             ],
        ///             applicationPackageReferences: [ApplicationPackageReference],
        ///             applicationLicenses: [string],
        ///             userAccounts: [
        ///               {
        ///                 name: string,
        ///                 password: string,
        ///                 elevationLevel: ElevationLevel,
        ///                 linuxUserConfiguration: {
        ///                   uid: number,
        ///                   gid: number,
        ///                   sshPrivateKey: string
        ///                 },
        ///                 windowsUserConfiguration: {
        ///                   loginMode: LoginMode
        ///                 }
        ///               }
        ///             ],
        ///             metadata: [
        ///               {
        ///                 name: string,
        ///                 value: string
        ///               }
        ///             ],
        ///             mountConfiguration: [
        ///               {
        ///                 azureBlobFileSystemConfiguration: {
        ///                   accountName: string,
        ///                   containerName: string,
        ///                   accountKey: string,
        ///                   sasKey: string,
        ///                   blobfuseOptions: string,
        ///                   relativeMountPath: string,
        ///                   identityReference: ComputeNodeIdentityReference
        ///                 },
        ///                 nfsMountConfiguration: {
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 },
        ///                 cifsMountConfiguration: {
        ///                   username: string,
        ///                   source: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string,
        ///                   password: string
        ///                 },
        ///                 azureFileShareConfiguration: {
        ///                   accountName: string,
        ///                   azureFileUrl: string,
        ///                   accountKey: string,
        ///                   relativeMountPath: string,
        ///                   mountOptions: string
        ///                 }
        ///               }
        ///             ]
        ///           }
        ///         }
        ///       },
        ///       onAllTasksComplete: OnAllTasksComplete,
        ///       onTaskFailure: OnTaskFailure,
        ///       networkConfiguration: {
        ///         subnetId: string
        ///       },
        ///       metadata: [MetadataItem],
        ///       executionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         poolId: string,
        ///         schedulingError: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         terminateReason: string
        ///       },
        ///       stats: {
        ///         url: string,
        ///         startTime: string (ISO 8601 Format),
        ///         lastUpdateTime: string (ISO 8601 Format),
        ///         userCPUTime: JobStatisticsUserCPUTime,
        ///         kernelCPUTime: JobStatisticsKernelCPUTime,
        ///         wallClockTime: JobStatisticsWallClockTime,
        ///         readIOps: number,
        ///         writeIOps: number,
        ///         readIOGiB: number,
        ///         writeIOGiB: number,
        ///         numSucceededTasks: number,
        ///         numFailedTasks: number,
        ///         numTaskRetries: number,
        ///         waitTime: JobStatisticsWaitTime
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetFromJobSchedules(string jobScheduleId, string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "JobClient.GetFromJobSchedules");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetFromJobSchedulesRequest(jobScheduleId, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetFromJobSchedulesNextPageRequest(nextLink, jobScheduleId, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       poolId: string,
        ///       nodeId: string,
        ///       nodeUrl: string,
        ///       jobPreparationTaskExecutionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         state: JobPreparationTaskState,
        ///         taskRootDirectory: string,
        ///         taskRootDirectoryUrl: string,
        ///         exitCode: number,
        ///         containerInfo: {
        ///           containerId: string,
        ///           state: string,
        ///           error: string
        ///         },
        ///         failureInfo: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         retryCount: number,
        ///         lastRetryTime: string (ISO 8601 Format),
        ///         result: TaskExecutionResult
        ///       },
        ///       jobReleaseTaskExecutionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         state: JobReleaseTaskState,
        ///         taskRootDirectory: string,
        ///         taskRootDirectoryUrl: string,
        ///         exitCode: number,
        ///         containerInfo: TaskContainerExecutionInformation,
        ///         failureInfo: TaskFailureInformation,
        ///         result: TaskExecutionResult
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPreparationAndReleaseTaskStatusesAsync(string jobId, string filter = null, string select = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "JobClient.GetPreparationAndReleaseTaskStatuses");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPreparationAndReleaseTaskStatusesRequest(jobId, filter, select, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetPreparationAndReleaseTaskStatusesNextPageRequest(nextLink, jobId, filter, select, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> This API returns the Job Preparation and Job Release Task status on all Compute Nodes that have run the Job Preparation or Job Release Task. This includes Compute Nodes which have since been removed from the Pool. If this API is invoked on a Job which has no Job Preparation or Job Release Task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Tasks can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       poolId: string,
        ///       nodeId: string,
        ///       nodeUrl: string,
        ///       jobPreparationTaskExecutionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         state: JobPreparationTaskState,
        ///         taskRootDirectory: string,
        ///         taskRootDirectoryUrl: string,
        ///         exitCode: number,
        ///         containerInfo: {
        ///           containerId: string,
        ///           state: string,
        ///           error: string
        ///         },
        ///         failureInfo: {
        ///           category: ErrorCategory,
        ///           code: string,
        ///           message: string,
        ///           details: [
        ///             {
        ///               name: string,
        ///               value: string
        ///             }
        ///           ]
        ///         },
        ///         retryCount: number,
        ///         lastRetryTime: string (ISO 8601 Format),
        ///         result: TaskExecutionResult
        ///       },
        ///       jobReleaseTaskExecutionInfo: {
        ///         startTime: string (ISO 8601 Format),
        ///         endTime: string (ISO 8601 Format),
        ///         state: JobReleaseTaskState,
        ///         taskRootDirectory: string,
        ///         taskRootDirectoryUrl: string,
        ///         exitCode: number,
        ///         containerInfo: TaskContainerExecutionInformation,
        ///         failureInfo: TaskFailureInformation,
        ///         result: TaskExecutionResult
        ///       }
        ///     }
        ///   ],
        ///   odata.nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   code: string,
        ///   message: {
        ///     lang: string,
        ///     value: string
        ///   },
        ///   values: [
        ///     {
        ///       key: string,
        ///       value: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPreparationAndReleaseTaskStatuses(string jobId, string filter = null, string select = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "JobClient.GetPreparationAndReleaseTaskStatuses");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPreparationAndReleaseTaskStatusesRequest(jobId, filter, select, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetPreparationAndReleaseTaskStatusesNextPageRequest(nextLink, jobId, filter, select, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetAllLifetimeStatisticsRequest(int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/lifetimejobstats", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string jobId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateGetJobRequest(string jobId, string select, string expand, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreatePatchRequest(string jobId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateRequest(string jobId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableRequest(string jobId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/disable", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEnableRequest(string jobId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/enable", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateTerminateRequest(string jobId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/terminate", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateAddRequest(RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetJobsRequest(string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFromJobSchedulesRequest(string jobScheduleId, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/jobs", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPreparationAndReleaseTaskStatusesRequest(string jobId, string filter, string select, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/jobpreparationandreleasetaskstatus", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTaskCountsRequest(string jobId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/taskcounts", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobsNextPageRequest(string nextLink, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFromJobSchedulesNextPageRequest(string nextLink, string jobScheduleId, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPreparationAndReleaseTaskStatusesNextPageRequest(string nextLink, string jobId, string filter, string select, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
